/*----------------------------------------------------------------------------------------------------------------------
    final Anahtar sözcüğü:
    final anahtar sözcüğü aşağıdaki bildirimlerde kullanılan önemli bir anahtar sözcüktür:
    - Değişken bildirimleri (final variables)
    - Sınıf bildirimlerinde (final classes)
    - Metot bildirimlerinde (final methods)
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
    final Değişkenler:
    Anımsanacağı gibi Java'da 3 çeşit değişken vardır: local variables, parameter variables, member variables. 
    Değişkenler final olarak bildirilebilir. Bir değişkenin final olması durumunda o değişkene scope'u boyunca bir kez
    değer verilebilir. Yani değişkenin değeri değiştirilemez. Değerinin değiştirilmeye çalışılması error oluşturur.
    
    Bazı değişkenler final anahtar sözcüğü kullanılmasa bile belirli koşullar altında final etkisinde olabilmektedir.
    Bu kavrama effectively final denir. Bu kavram ileride ele alınacaktır.
    
    Java 8 ile birlikte yerel değişkenlerin ve parametre değişkenlerinin final olarak bildirilmesi gerekliliği ortadan 
    kalkmıştır. Bunun nedeni Java ile Uygulama geliştirme kursunda ele alınacak. Ancak veri elemanlarının final olarak 
    bildirilmesi oldukça önemlidir.

    final bir yerel değişkene scope'u içerisinde ya initialize edilerek ya da atama yapılarak toplamda bir kez verilebilir.
    Bir metotun parametre değişkeni final olabilir. Bu durumda metot içerisinde o parametre değişkeninin değeri 
    değiştirilemez.

    Aşağıdaki demo örneği inceleyiniz.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
       final int a = 10;
       final int b;
       
       b = 20;
       
       ++b; // error
       
       a += 3; // error
    }
}
class Sample {
    public static void foo(int a, final double b)
    {
        ++a;
        --b; // error
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Bir veri elemanı final olarak bildirilebilir. final veri elemanlarına default değerler otomatik olarak verilemez.
----------------------------------------------------------------------------------------------------------------------*/
class Sample {
    public final int a; // error
    public static final int b; // error
}
/*----------------------------------------------------------------------------------------------------------------------
    Anahtar Notlar: Sınıf veri elemanı için erişim belirleyici, static anahtar sözcüğü ve final anahtar sözcüğü aynı 
    sentaks seviyesinde olduklarından istenilen sırada yazılabilir. Ancak okunabilirlik/algılanabilirlik açısından 
    bildirimde şu sırayla yazılması uygundur:
        [erişim belirleyici] [static] [final] 
    
    Sınıfın non-static ve final olarak bildirilmiş bir veri elemanına aşağıdaki 3 yerden yalnızca birinde değer verilebilir:
    - Bildirim noktasında (initialization)
    - Tüm ctor'lar içerisinde
    - non-static initializer içerisinde
    Sınıfın static ve final olarak bildirilmiş bir veri elemanına aşağıdaki 2 yerden yalnızca birinde değer verilebilir:
    - Bildirim noktasında (initialization)
    - static initializer içerisinde
    
    static ve non-static initializer elemanları ileride ele alınacaktır.
    
    Aşağıdaki demo örneği inceleyiniz.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    
    public static void main(String[] args)
    {
        Sample s = new Sample();
        Mample m1 = new Mample(45);
        Mample m2 = new Mample();
        
        System.out.printf("s.a = %d, Sample.b = %d%n", s.a, Sample.b);
        System.out.printf("m1.a = %d%n", m1.a);
        System.out.printf("m2.a = %d%n", m2.a);
    }
}
class Sample {
    public final int a = 10; 
    public static final int b = 20; 
}
class Mample {
    public final int a;
    
    public Mample()
    {
        a = 0;
    }

    public Mample(int x)
    {
        a = x;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    non-static ve final olarak bildirilmiş bir veri elemanına ctor dışında değer verilmemişse TÜM ctor'lar içerisinde 
    değer verilmelidir. Aksi halde error oluşur.
----------------------------------------------------------------------------------------------------------------------*/
class Sample {
    public final int a; // error

    public Sample()
    {
        //a = 0;
    }

    public Sample(int x)
    {
       a = x;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    final bir değişkene sabit ifadesiyle (constant expression) ile değer verilmesi zorunlu değildir. Sınıfın static ve
    final olarak bildirilmiş bir veri elemanına sabit ifadesi ile değer verildiğinde o veri elemanı sabit ifadesi olarak
    kullanılabilir. Sınıfın public, static ve final olarak bildirilmiş bir elemanı için (özellikle sabit ifadesi ile de değer
    veriliyorsa) bir convention olarak tamamı büyük harflerden oluşacak ve birden fazla kelimeden oluşuyorsa kelimeler
    alttire karakteri ile ayrılacak şekilde isimlendirme yapılır.
    
    Aşağıdaki demo örneği inceleyiniz.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {

    public static void main(String[] args)
    {
        Window w = new Window();
        
        w.setVisibility(Visibility.GONE);
    }
}
class Window {
    public void setVisibility(int value)
    {
        switch (value) {
            case Visibility.VISIBLE -> System.out.println("Visible");
            case Visibility.INVISIBLE -> System.out.println("Invisible");
            case Visibility.GONE -> System.out.println("Gone");
            
        }
    }
}
class Visibility {
    public static final int VISIBLE = 1; 
    public static final int INVISIBLE = 0;
    public static final int GONE = 2;
    
}
/*----------------------------------------------------------------------------------------------------------------------
    final bir referans değişkenin gösterdiği nesnenin (yani içerisinde tuttuğu adresteki nesne) içeriği değiştirilebilir.
    Burada referansın içerisinde tuttuğu adres değiştirilemez. Bu durumda nesne final olamaz! Bir nesnenin içeriğinin
    (içeriği derken non-static veri elemanları) değiştirilememesi için o sınıfın immutable olarak yazılmış olması gerekir.
    Bu durumda da nesneyi gösteren bir referansın final olup olmamasının nesnenin içeriğinin değiştirilip değiştirilememesi
    anlamında bir önemi yoktur.
    
    Aşağıdaki demo örneği inceleyiniz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {

    public static void main(String[] args)
    {
        final Sample s = new Sample(20);

       s.x = 10;
    }
}
class Sample {
    public int x;
    public Sample(int a)
    {
        x = a;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki RandomStringArrayGenerator sınıfında m_texts veri elemanı gizlenmiştir. m_texts referansının içerisindeki
    adres dışarıya verildiği için ve referans da bir dizi gösterdiği için client code içerisinde dizinin elemanları
    değiştirilmiştir. Dolayısıyla sınıf içerisinde tutulan dizi de bundan etkilenmiştir. Yani referans değişkeni gizlemek
    (hatta onu final yaparak atama yapılmasını engellemek) dizi nesnesinin değiştirilmesini engellememiştir. Çünkü
    diziler immutable değildir. Bu durumda sınıfı yazan programcı da getTexts metodunun dokümantasyonunda bu durumu
    belirtmelidir. Ya da dokümanın yazım biçiminden bu anlaşılmalıdır.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.generator.random.string.RandomStringArrayGeneratorTR;

import java.util.Random;

class App {

    public static void main(String[] args)
    {
        RandomStringArrayGeneratorTR generator = new RandomStringArrayGeneratorTR(new Random(), 10, 4, 11);
        String [] texts = generator.getTexts(); // burda her iki referans da (texts ve generator) aynı nesneyi gösteriyor

        System.out.println("Texts:");
        for (String text : texts)
            System.out.println(text);
        System.out.println("----------------------------------------------------------------------");

        for (int i = 0; i < texts.length; ++i)
            texts[i] = texts[i].toUpperCase();

        System.out.println("Texts:");
        for (String text : texts)
            System.out.println(text);
        System.out.println("----------------------------------------------------------------------");

        System.out.println("Generated Texts:");
        for (String text : generator.getTexts())
            System.out.println(text);
        System.out.println("----------------------------------------------------------------------");
    }
}
/*----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.generator.random.string;

import org.csystem.util.string.StringUtil;

import java.util.Random;

public class RandomStringArrayGeneratorTR {
    private final String [] m_texts;

    public RandomStringArrayGeneratorTR(Random random, int count, int origin, int bound)
    {
        m_texts = StringUtil.generateRandomTextsTR(random, count, origin, bound);
    }
    public String [] getTexts()
    {
        return m_texts;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Yukarıdaki sınıf aşağıdaki gibi yazıldığında artık içsel olarak tutulan dizinin doğrudan adresi değil, kopyasının
    (yeni yaratılmış olan) bir dizinin adresi dışarıya verilmiştir. (Bu sınıf işte tam immutable oldu). Bu durumda sınıfı
    yazan programcı da getText metodunun dokümantasyonunda bu durum belirtir.
    
    Anahtar Notlar: Arrays sınıfının copyOf metodu birinci parametresi ile aldığı dizinin, ikinci parametresi ile aldığı
    newLength tane elemanından oluşan yeni bir (newly allocated) dizi referansına geri döner.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.generator.random.string.RandomStringArrayGeneratorTR;

import java.util.Random;

class App {

    public static void main(String[] args)
    {
        RandomStringArrayGeneratorTR generator = new RandomStringArrayGeneratorTR(new Random(), 10, 4, 11);
        String [] texts = generator.getTexts(); // burda her iki referans da (texts ve generator) aynı nesneyi gösteriyor

        System.out.println("Texts:");
        for (String text : texts)
            System.out.println(text);
        System.out.println("----------------------------------------------------------------------");

        for (int i = 0; i < texts.length; ++i)
            texts[i] = texts[i].toUpperCase();

        System.out.println("Texts:");
        for (String text : texts)
            System.out.println(text);
        System.out.println("----------------------------------------------------------------------");

        System.out.println("Generated Texts:");
        for (String text : generator.getTexts())
            System.out.println(text);
        System.out.println("----------------------------------------------------------------------");
    }
}
/*----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.generator.random.string;

import org.csystem.util.string.StringUtil;
import java.util.Arrays;
import java.util.Random;

public class RandomStringArrayGeneratorTR {
    private final String [] m_texts;

    public RandomStringArrayGeneratorTR(Random random, int count, int origin, int bound)
    {
        m_texts = StringUtil.generateRandomTextsTR(random, count, origin, bound);
    }
    public String [] getTexts()
    {
        return Arrays.copyOf(m_texts,m_texts.length);
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte sınıfı kullanan programcı bir dizi referansını zaten elde edememektedir.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.generator.random.string.RandomStringArrayGeneratorTR;
import java.util.Random;

class App {

    public static void main(String[] args)
    {
        RandomStringArrayGeneratorTR generator = new RandomStringArrayGeneratorTR(new Random(), 10, 4, 11);
        int size = generator.size(); 

        for (int i = 0; i < size; ++i)
            System.out.println(generator.get(i));

    }
}
/*----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.generator.random.string;

import org.csystem.util.string.StringUtil;
import java.util.Random;

public class RandomStringArrayGeneratorTR {
    private final String [] m_texts;

    public RandomStringArrayGeneratorTR(Random random, int count, int origin, int bound)
    {
        m_texts = StringUtil.generateRandomTextsTR(random, count, origin, bound);
    }
    public int size()
    {
        return m_texts.length;
    }
    public String get(int index)
    {
        return m_texts[size()];
    }
}

