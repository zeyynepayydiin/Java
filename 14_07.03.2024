
/*----------------------------------------------------------------------------------------------------------------------
Aritmetik 4 işlem operatörleri (+, -, *, /) iki operandlı ve araek durumundadır. Operatörler işlemin sonucuna ilişkin
değeri üretirler. Bu operatörlerin yan etkisi yoktur. * ve / operatörleri, + ve - operatörlerinden yüksek önceliklidir.
Aritmetik 4 işlem operatörleri soldan sağa önceliklidir. İlgili operatöre ilişkin geçerli işlemler kısıt olarak 
düşünülebilir. Örn: iki string toplanabilir ancak çarpılamaz bu, çarpma operatörünün kısıtıdır. 
----------------------------------------------------------------------------------------------------------------------
*/

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.println("İki sayı giriniz:");
		int a = kb.nextInt();
		int b = kb.nextInt();
		
		System.out.printf("%d + %d = %d%n", a,b,a+b);
		System.out.printf("%d - %d = %d%n", a,b,a-b);
		System.out.printf("%d * %d = %d%n", a,b,a*b);
		System.out.printf("%d + %d = %d%n", a,b,a/b);
		
	}
	
}

!!İşlem önceliği ile işlemin yapılış sırası her zaman aynı değildir.!!

/*----------------------------------------------------------------------------------------------------------------------
Mod operatörü (%) aslında bir çeşit bölme işlemi yapar. Bu sebeple özellikleri ürettiği değer dışında bölme operatörü
ile aynıdır(seviyesi de dahil). Bu operatör birinci operandınının ikinci operandına bölümünden elde edilen kalan 
değerini verir. Bu operatörün ikinci operandının işaretinin bir önemi yoktur. Yani ikinci operandı negatif bile olsa 
pozitif değeri ile işlem yapılır. Bu operatörün birinci operandı negatif ise işlem şu şekilde yapılır: Birinci operandın
pozitif olduğu değere göre kalan değerinin ters işareti alınır. Yani bu operatörün ürettiği değerin işareti birinci 
operandının işareti ile aynıdır. Yani sonuç olarak bu operatör negatif operandlar için matematikteki mod alma işlemi 
ile aynı değildir. Bazı programlama dillerinde gerçek sayılar için mod operatörü kullanılamaz. Ancak Java'da böyle bir 
kısıt yoktur. Pratikte bu operatörler daha çok tamsayılarda kullanılır. Aşağıdaki demo örneği inceleyiniz.
----------------------------------------------------------------------------------------------------------------------
*/

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.println("İki sayı giriniz:");
		int a = kb.nextInt();
		int b = kb.nextInt();
		
		System.out.printf("%d %% %d = %d%n", a,b,a%b);
		
	}
	
}
// -10 3
-10 % 3 = -1

// 10 -3
10 % -3 = 1

/*----------------------------------------------------------------------------------------------------------------------
Sınıf Çalışması: Parametresiyle aldığı int türden 3 basamaklı bir sayının basamakları toplamına geri dönen 
sumOf3Digits metodunu NumberUtil isimli sınıf içerisinde aşağıdaki açıklamalara göre yazınız ve test ediniz
Açıklamalar:
  - Metot sayının 3 basamaklı olup olmadığının kontolünün yapmayacaktır.
  - Metot negatif sayılar için de pozitif toplam değerine geri dönecektir.
----------------------------------------------------------------------------------------------------------------------
*/

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		NumberUtilSumOf3DigitsTest.run();
		
	}
	
}
class NumberUtilSumOf3DigitsTest{
	public static void run() {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.println("Bir sayı giriniz: ");
		int a = kb.nextInt();
		
		System.out.printf("%d sayısının basamakları toplamı: %d%n", a,NumberUtil.sumOf3Digits(a));
		
	}
}

class NumberUtil{
	public static int sumOf3Digits(int val) 
	{
		int a = val / 100;
		int b = val % 100 / 10;
		int c = val % 10;
		
		return Math.abs(a + b + c);
		
	}	
}
//Bir sayı giriniz: 
-135
-135 sayısının basamakları toplamı: 9

/*----------------------------------------------------------------------------------------------------------------------
İşaret eksi (-) aritmetik operatörü tek operandlı ve önek durumundadır. Bu operatör operandına ilişkin ifadenin ters 
işaretlisini üretir. Operatörün yan etkisi yoktur. Operatör, ikinci seviyede ve dolayısıyla sağdan sola önceliklidir.
Operatör eksi işareti alınabilen her tür için kullanılabilir. İşaret + operatörü de yine aynı özelliklere sahip ancak
ifadenin değerini üreten bir operatördür. Bu anlamda + operatörünü kullanmakla kullanmamak arasında fark yoktur.
Bütünlük açısından dile eklenmiştir. Aşağıdaki demo örneği inceleyiniz.
----------------------------------------------------------------------------------------------------------------------
*/

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.println("Bir sayı giriniz: ");
		int a = kb.nextInt();
		int x;
		
		x = -a;
		
		System.out.printf("x = %d%n",x);
		
		x= +a;
		
		System.out.printf("x = %d%n",x);	
		
	}
	
}
