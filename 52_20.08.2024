/*----------------------------------------------------------------------------------------------------------------------
	Diziler (Arrays) 
	Elemanları ayn türden olan ve elemanları bellekte peş peşe tutulacak şekilde yaratılan veri yapısıdır. Diziler
	programlamada en temel veri yapılarıdır. Hatta bazı veri yapıları dizi kullanılarak implemente edilebilir.
	
	Java'da diziler heap'te yaratılırlar. Yani sınıfsal temsil edilmişlerdir. Java'da stack'te dizi yaratılamaz. T bir
	tür ismi olma üzere her bir elemanı T türünden olan (bu durumda T türden dizi de denebilir) bir dizi referansı 
	bildiriminin iki biçimi vardır:
		1. T [] a;
		2. T a[];
		
	Burada a bir referans değişkendir. Henüz daha dizi yaratılmamıştır. İkinci biçime "C stili (C style) bildirim de
	denilmektedir. Java programcısına önerilmemektedir. Pek çok static kod analizi aracı da ikinci biçime default olarak
	uyarı vermektedir. Biz de kodlarımızda birinci biçimi tercih edeceğiz.
		
	Örneğin:
		int [] a;
		int a[];
------------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args) 
	{		
		int [] a; // int türden dizi referansı bildirimi
		int b[];// int türden dizi referansı bildirimi
}
}
/*----------------------------------------------------------------------------------------------------------------------
	Dizi referansı bildirimlerinin farkı
------------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args) 
	{		
		int [] a, b, c; // a, b ve c int [] türden
		int x[], y, z ;// x int[], y ve z int türden
	}
}
/*----------------------------------------------------------------------------------------------------------------------
	Dizi yaratmak için yine new operatörü kullanılır. Dizi yaratmak için new operatörü kullanımının genel biçimi şu
	şekildedir:
		new <tür> [<int türüne doğrudan dönüşebilen türden değer>]
	Burada [] içerisinde verilen değere dizinin uzunluğu (length) denir. Uzunluk dizinin eleman sayısıdır. Java'da 
	dizi uzunluğunun sabit ifadesi olması gerekmez. Dizi yaratıldıktan sonra uzunluğu değiştirilemez. Dizi uzunluğunun
	negatif olması durumunda exception oluşur. Dizi uzunluğuna length isimli veri elemanı ile erişilebilir. lentgh
	veri elemanının değeri değiştirilemez.
	
	Dizinin elemanlarına erişmek için [] operatörü (subscribtion operator) kullanılır. Bu operatör özel amaçlı iki 
	operandlı ve araek durumundadır. Operatörün birinci operandı bir referans ikinci operandı ise int türüne doğrudan
	dönüşebilen bir değer olmalıdır. İkinci operandına indeks değeri de denilmektedir. Dizinin ilk elemanına sıfır numaralı
	indeks değeri kullanılarak erişilir. Yani bu anlamda dizinin elemanlarına erişmek için kullanılan indeks değerleri
	[0, length) aralığıdır. Bu operatör öncelik tablosunda birinci seviyededir. Operatörün ürettiği değer 
	indeksteki elemana ilişkin değişkendir. İndeks numarası pozitif ya da negatif bakımdan sınırlar dışında bir değer
	olarak verilirse exception oluşur. 

	Dizi yaratıldığında elemanlarının her birine default değerler atanır.
------------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki demoyu inceleyiniz
------------------------------------------------------------------------------------------------------------------------*/
package csd;

import java.util.Scanner;

class App {
	public static void main(String [] args) 
	{		
		Scanner kb = new Scanner(System.in);
		
		System.out.print("Bir sayı giriniz: ");
		int count = kb.nextInt();
		
		int [] a;
		
		a = new int[count];
		
		int len = a. length;
		
		for(int i = 0; i < len; ++i)
			a[i] = i;    //a'nın türü a[] ama a[]'in türü int
		
		for(int i = 0; i < len; ++i)
			System.out.printf("%d ", a[i]);
		
		System.out.println();
		
	}
}
/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki demo örneği inceleyiniz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;

class App {
	public static void main(String [] args)
	{
		Scanner kb = new Scanner(System.in);

		System.out.print("Bir sayı giriniz:");
		int count = kb.nextInt();

		int [] a;

		a = new int[count];
		int len = a.length;

		for (int i = 0; i < len; ++i)
			a[i] = i;

		System.out.println(a[5]);
	}
}
/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki demoyu inceleyiniz
------------------------------------------------------------------------------------------------------------------------*/

package csd;

import java.util.Random;
import java.util.Scanner;

class App {
	public static void main(String [] args) 
	{		
		Scanner kb = new Scanner(System.in);
		
		System.out.print("Bir sayı giriniz: ");
		int count = kb.nextInt();
		
		int [] a;
		Random r = new Random();
		a = new int[count];
		
		int len = a. length;
		
		for(int i = 0; i < len; ++i)
			a[i] = r.nextInt(100);  
		
		for(int i = 0; i < len; ++i)
			System.out.printf("%02d ", a[i]);
		
		System.out.println();
		
	}
}
/*----------------------------------------------------------------------------------------------------------------------
	Dizi yaratıldığında elemanlarının her birine default değerler atanır.
------------------------------------------------------------------------------------------------------------------------*/
package csd;

import java.util.Random;
import java.util.Scanner;

class App {
	public static void main(String [] args) 
	{		
		Scanner kb = new Scanner(System.in);
		
		System.out.print("Bir sayı giriniz: ");
		int count = kb.nextInt();
		
		int [] a;
		boolean [] b;
;		
		a = new int[count];
		b = new boolean[count];
		
		for(int i = 0; i < count; ++i)
			System.out.printf("%d ", a[i]);
		System.out.println();
		
		for(int i = 0; i < count; ++i)
			System.out.printf("%b ", b[i]);
		
		System.out.println();
		
	}
}
/*----------------------------------------------------------------------------------------------------------------------
	Bir diziye ilk değer verilebilir {initialization}. Bu işlem için {} kullanılır. {} içerisindeki değerler virgül ile
	ayrılır. Dizinin eleman sayısı verilen değer kadar olur. Yani ilk değer verildiğinde ilgili dizi nesnesi yaratılır
	ve elemanlar ilk değer olarak verilir. İlk değer verme sentaksında yine new operatörü kullanılır. [] içerisi boş
	bırakılır. [] içerisine değer verilmesi durumunda error olşur. Diziye ilk değer verilirken aynı zamanda dizinin
	adresine ilişkin referans değişkene de ilk değer veriliyorsa new operatörü kullanılmasına gerek yoktur. İstenirse
	kullanılabilir.
------------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnekte diziye ilk değer verilmiştir ancak referansa ilk değer verilmemiştir.
------------------------------------------------------------------------------------------------------------------------*/
package csd;

import java.util.Random;
import java.util.Scanner;

class App {
	public static void main(String [] args) 
	{	
		int [] a;

		a = new int [] {1, 2, 3, 4, 5, 6};
	
		for(int i = 0; i < a.length; ++i)
			System.out.printf("%d ", a[i]);
		
		System.out.println();
		
	}
}
/*----------------------------------------------------------------------------------------------------------------------
	 Aşağıdaki örnekte diziye ve ilgili referansa da ilk değer verilmiştir.
------------------------------------------------------------------------------------------------------------------------*/

package csd;

import java.util.Random;
import java.util.Scanner;

class App {
	public static void main(String [] args) 
	{		
		int [] a = {1, 2, 3, 4, 5, 6};
	
		for(int i = 0; i < a.length; ++i)
			System.out.printf("%d ", a[i]);
		
		System.out.println();
		
	}
}
/*----------------------------------------------------------------------------------------------------------------------
    Diziye ilk değer verme sentaksında son elemandan sonra virgül yazılabilir. Buna "trailing comma" denir. Bunu yazmakla
    yazmamak aradında bir fark yoktur. Bunun programcının yaklaşımına göre iki tane kullanımı söz konusu olabilir:
        1. Programcı henüz ilk değerleri kod içerisinde tamamlamamıştır ve bunu belirtmek için sondaki virgülü kullanabilir.
        2. Verilen ilk değerlerin geliştirme aşamasında yerlerinin çok sık değişebileceği durumda, değiştirme işlemi
        daha kolay yapılabilir.
----------------------------------------------------------------------------------------------------------------------*/

package org.csystem.app;

import static org.csystem.util.array.ArrayUtil.print;

class App {
    public static void main(String [] args)
    {
        int [] a = {1, 2, 3, 4, 5,6, };
        print(a);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Bir metodun parametre değişkeni bir dizi referansı olabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import static org.csystem.util.array.ArrayUtil.print;

class App {
	public static void main(String [] args)
	{
		int [] a = {1, 2, 3, 4, 5, 6};

		print(a);
	}
}
