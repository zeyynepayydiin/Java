
Java' da boolean türü dışında kalan temel türlerin uzunlukları her sistemde aynıdır. Boolean türünün aldığı iki tane değer olduğundan yani herhangi bir sinir söz konusu olmadığından programcı açısından
uzunluğun da önemi yoktur.

Yazılar da aslında bilgisayar belleğinde 2'lik sistemde sayılar biçiminde tutulmaktadır. Bir yazıyı oluşturan elemanlara "karakter" denilmektedir. İşte
bir yazıda her bir karakter 2'lik sistemde bir sayı ile ifade edilir. Böylece yazı aslında ikilik sistemde bir sayı dizisi gibi tutulmaktadır. İşte
bir karakter için hangi sayının karşı geldiğini belirten tablolara "karakter tabloları" denilmektedir. Karakter tablosundaki karakter şekillerine "glyph"
denilmektedir. Her karaktere tabloda bir sıra numarası verilmiştir. Buna da "code point" denilmektedir. Dünyanın ilk standart karakter tablosu "ASCII (American
Standard Code Information Interchange)" denilen tablodur. ASCII tablosu aslında 7 bit bir tablodur. Dolayısıyla tabloda 128 tane glyph için code point
bulundurulmuştur. ASCII dışında IBM EBCDIC tablosunu geliştirmiştir. Wang firması WISCII tablosunu kullanmıştır. ASCII tablosu Amerikalılar tarafından yalnızca İngilizce
karakterleri ifade etmek için oluşturulmuştur. Bilgisayarlar yaygınlaşmaya başladığında farklı karakterlere sahip olan Türkiye gibi, Yunanistan gibi, Almanya gibi
ülkeler bu ASCII tablosunu 8 bite çıkartıp elde edilen 128'lik yeni alanı kendi karakterlerini ifade etmek için kullanmışlardır. ASCII tablosunun ilk yarısı 
(yani [0, 128] numaraları karakterleri) standarttır. Ancak ikinci yarısı "code page" adı altında farklı ülkeler tarafından farklı yerleşimler yapılarak kullanılmaktadır. 
DOS zamanlarında Türkçe karakterler için OEM 857 denilen code page kullanılıyordu. Daha sonra Microsoft Windows sistemlerinde Türkçe karakterler için 1254 code page'i
düzenledi. ISO, bu code page'leri standart hale getirmiştir. Bugün Türkçe karakterler ISO tarafından ASCII 8859-9 Code page'i ile düzenlenmiştir.

ASCII tablosu ve onların code page'leri uzun süre kullanılmış ve hala kullanılmakta olsa da maalesef karışıklıklara yol açmaktadır. İşte son 20 yıldır
artık karakterleri 2 byte içerisinde ifade ederek dünyanın bütün dillerinin ve ortak sembollerinin tek bir tabloya yerleştirilmesi ile ismine UNICODE 
denilen bir tablo oluşturulmuştur (www-unicode.org). UNICODE tablo ISO tarafından 10646 ismiyle de bazı farklılıklarla standardize edilmiştir. UNICODE tablonun
ilk 128 karakteri standart ASCII karakterleri, ikinci 128 karakteri ISO 8859-9 code page'indeki karakterlerdir. 

Bir karakter tablosundaki code point'lerin ikilik sistemde ifade edilme biçimine "encoding" denilmektedir. ASCII code page'lerinde encoding doğrudan 
code point'in 1 byte'lık sayı karşılığıdır. Ancak UNICODE tablonun değişik encoding'leri kullanılmaktadır. UNICODE tablonun klasik encoding'i UTF-16'dır. 
Burada code point doğrudan 16 bir bir sayı biçiminde ifade edilir. UTF-32 encoding'inde ise code point 32 bitlik bir sayı biçiminde ifade edilmektedir. 
Ancak UNICODE tablonun en yaygın kullanılan encoding'i UTF-8 encoding'idir. UTF-8 kodlamasında standart ASCII karakterler 1 byte ile, diğer karakterler 
2 byte, 3 byte, 4 byte ve 5 byte kodlanabilmekedir. Türkçe karakterler UTF-8 encoding'inde 2 byte yer kaplamaktadr. UTF-8 encoding'i UNICODE bir yazının 
adeta sıkıştırılmış bir hali gibi düşünülebilir. 

Değişken:
Bellekte, ayrılan bir bölgen ile işlem yapılmasını sağlar yani o bölgeyi temsil eder. Bir değişken için bellekte yer alma detayları ileride ele alınacaktır. Değişken bildiriminin genel biçimi şu şekildedir:
<tür> <isim>;

Java'da bir değişken kullanılmadan önce bildirilmelidir. Değişken ismi, değişken isimlendirme kurallarına uygun herhangi bir isim olabilir. Bir değişkene bildirim noktasında değer verilmesine "initialization" 
denir. Atama ile initialization aynı işlem değildir. Bir derleyici tarafından görülebildiği kod aralığına "faaliyet alanı (scope)" denir. Bir değişkenin bellekte kalma süresine yani yaratılmasıyla yok edilmesi 
arasında kalan süre "ömür (storage duration)" denir. Ömür kavramı "adresler" konusuyla birlikte ileride ele alınacaktır.

Java'da 3 çeşit değişken vardır:
1. Yerel değişkenler (local variables)
2. Parametre değişkenleri (parameter variables)
3. Sınıf veri elemanları (member variables)

Bir metot içerisinde { ile } arasında kalan bölgeye parantezler ile birlikte "blok (block)" denir. Bu anlamda metodun gövdesi de bir bloktur. Bir metot içerisinde istenildiği kadar iç içe veya ayrık bloklar 
olabilir.  Bir blok içerisinde bildirilen değişkenlere yerel değişkenler (local variables) denir. Eğer yerel değişkenler aynı türden ise bu durumda bildirim virgül ile ayrılarak yapılabilir. Yerel bir değişkenin 
faaliyet alanı (scope) bildirildiği yerden bildirildiği bloğun sonuna kadardır.


Aynı faaliyet alanı içerisinde aynı isimde yerel değişken bildirimi yapılamaz. Farklı faaliyet alanları içerisinde aynı isimde yerel değişken bildirimi geçerlidir.

System.out.println, System.out.print metotları aldıkları değişkenin değerini ekrana basarlar.

Java'da değer verilmemiş bir değişken kullanılamaz. Yerel değişkenlere otomatik olarak değer verilmez. Yerel değişkenin kullanılması için faaliyet alanı içerisinde en az bir kez programcı tarafından değer
verilmiş olması gerekir.

Değişken isimlendirme kuralları (Buradaki kurallar tüm değişken atomlar):
- Değişken isimleri rakam karakteri ile başlatılmaz. Uygun bir karakter ile başlatılıp istenildiği kadar rakam karakteri kullanılır. 1234 olmaz.
- Değişken isimlerinde "_ (underscore)" karakteri kullanılabilir, bu karakter ile de başlatılabilir. _1234 olur.
- Java 8 ile birlikte _ karakterinin tek başına değişken ismi olması deprecated (altta açıklandı) olmuştur.  Java 9 ile birlikte _ karakterinin tek başına kullanımı error olarak değerlendirilir.
- Anahtar sözcükler tek başlarına değişken ismi olamazlar. Java'ya daha sonraya eklenen bazı sözcükler kullanım yerine göre anahtar sözcük ya da değişken gibi ele alınırlar. Aslında bu tip sözcükler JLS'de anahtar 
sözcükler listesinde bulunmaz. Bu tip sözcüklere programlamada "contextual keywords" denilmektedir.
- Değişken isimleri bir boşluk (whitespace) karakteri içeremez.
- Değişken isimleri büyük-küçük harf duyarlıdır (case sensitive). Aslında Java case sensitive bir dildir. Örneğin anahtar sözcüklerin tamamı küçük harfle yazılmalıdır.
- Değişken isimleri UNICODE alfabetik karakterler içerebilir. Örneğin değişken isimlerinde Türkçe karakterler kullanılabilir. Her ne kadar değişken isimlerinde UNICODE alfabetik karakterler kullanılabilse de
programcı ingilizce alfabedeki karakterleri tercih etmelidir. Hatta programcı herhangi bir dilde bir değişken ismini herhangi bir dile özgü de yazmamalıdır. Değişken isimlerinde ingilizce kelimeler tercih 
edilmelidir.
- Değişken isimlerinde $ karakteri kullanılabilir. Değişken ismi $ karakteri ile başlatılabilir. $ karakteri tek başına değişken ismi olabilir. Derleyiciler bazı durumlarda arakoda veya arkod içerisinde isimler
verirler. Derleyiciler bu tip isimleri verirken $ karakterini de kullanırlar. Java programcısı da hiçbir zaman $ karakterini değişken isimlerinde kullanmaz. Bu durumda programcının belirlediği isimler ile derleyicinin
belirlediği isimlerin çakışma olasılığı olmaz. Zaten $ karakterinin değişken isimlendirmede kullanılabilmesinin nedeni yani varlık sebebi budur. JLS'de de $ karakteri bu şekilde açıklanmış ve programcı tarafından 
kullanılması önerilmemiştir. 
- Değişken isimleri okunabilirlik/algılanabilirlik "kolay telaffuz edilebilir, anlamlı ve yeterince uzunlukta" olması önerilir. Bu geneş bir programlama "convention"ı olarak düşünülmelidir. Değişken isimlendirmede bazı 
teknikler de kullanılabilmektedir. Genel olarak kullanılan programlama diline göre bir ya da birden fazla teknik kullanılabilmektedir. Lower camel case/ Upper camel case vs.
- JLS'de değişken isimlerinin maksimum karakter sayısı ile ilgili herhangi bir şey söylenmemiştir. Şüphesiz bir sınıfı olur. Ancak bu sınır olduk.a fazla olma eğiliminde olduğundan isimlendirmede bir sorun oluşturmaz.













Anahtar Notlar: 
Programlamada artık kullanılması önerilmeyen kavrama deprecated denir. Deprecated olmanın çeşitli gerekçeleri olabilir. Programcı deprecated olan bir şeyi özel bir durum yoksa kullanmamalıdır.Deprecated olmanın 
gerekçeleri ve yerine kullanılacak şeyler dokümente edilir.

Terimler:
JavaSE: (Kabaca standart kütüphane) Pek çok insan tarafından Java programlama dili düşünüldüğünde Java Platformu Standart Sürümü, yani Java SE API’si akla gelir. Java SE’nin API’si, Java programlama dilinin temel 
işlevselliğini sağlar. Java programlama dilinin temel türlerinden ve nesnelerinden ağ oluşturma, güvenlik, veri tabanı erişimi, grafik kullanıcı arabirimi (GUI) geliştirme ve XML ayrıştırma için kullanılan üst
düzey sınıflara kadar her şeyi tanımlamakla birlikte bir sanal makine, geliştirme araçları, dağıtım teknolojileri ve Java teknolojisi uygulamalarında yaygın olarak kullanılan diğer sınıf kitaplıkları ve araç 
takımlarından oluşur. Ek olarak Java SE, masaüstü bilgisayarlarda çalışan bağımsız programlar olan uygulamalar geliştirmek ve web tarayıcılarında çalışan programlar olan uygulamalar geliştirmek için kullanılır.
JLS: Java'nın Language Specification dokümanı (kitap).



