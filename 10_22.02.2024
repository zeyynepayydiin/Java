Metotlar ne işe yarar? Ya da başka bir deyişle bir problemin çözümünde neden metotlar yazalım? Aşağıda metot yazılmasına
ilişkin durumlar genel olarak ele alınmıştır

-Bir işi çok fazla yerde yapmak kod tekrarına yol açar. Yazılım geliştirmede temel prensip "zorunlu olmadıkça kod tekrarı
yapılmamalıdır (do not repeat yourself)" şeklindedir. Bu durumda programcı bir metot yazarak ilgili yerlerde o metodu çağırır.

- Bir problemin çözümü metot çağırma yerine her yerden kodun yazılması biçiminde "implemente" edilmişse, bu durumda 
programcı problemin çözümünde bir değişiklik yapmak isterse veya bir hata olduğunda düzeltmek için her yerde bu değişiklikleri
yapmak zorundadır. Bu da çoğu zaman zor olacaktır.

- Bir problemin çözümü metot çağırma yerin her yerde kodun yazılması biçiminde "implemente" edilmişse, bu durumda kodun
okunabilirliği/algılanabilirliği azalabilir. Yani metot çağırarak kodun okunabilirliği/algılanabilirliği artırılmış olur.

- Metot yazıldığında başka projelere taşınarak da kullanılabilir (code reusability).

- Metodu çağıram programcı metodun nasıl yazıldığına ilişkin detayları bilmek zorunda değildir. Çünkü metodun çağrıldığı 
noktada metodun nasıl yazıldığının önemi yoktur. Ne yaptığı önemlidir.

- Bir kod parçasının metot olarak yazılması onun bağımsız olarak test edilip doğrulanması veya varsa hataların düzeltilmesi
açısından da önemlidir.

Anahtar Notlar: İleride ele alacağımız Nesne Yönelimli Programlama Tekniği'ne (Object Oriented Programming Paradigm)
ilişkin kavramlar ile kodun parçalara ayrılması metotlar dışında daha yüksek seviyede de yapılabilecektir.


System.out.printf metodu ile formatlı yazdırma yapılabilir. printf metodunun birinci parametresine geçen argüman bir yazı
(string literal vb.) olmalıdır. Bu metot birinci parametresi ile birlikte değişken sayıda argüman alabilecek şekilde
tasarlanmıştır. Değişken sayıda argüman alan metotların (vararg methods) bildiriminin nasıl yapıldığı bu bölümde ele 
alınmayacak. printf metodunun birinci parametresine ilişkin yazının içerisinde % karakteri ile birlikte özel bazı karakterler 
kullanılabilmektedir. Bu özel karakterlere format karakterleri (format specifiers) denir. Bir format karakterinin yazı 
içerisinde % karakteri ile birlikte kullanılmasına ise yer tutucu (place holder) denir. Bir format karakteri özel bazıları 
dışında bir türe karşılık gelir ve o yer tutucu yerine printf'e geçilen argümanların değerleri yerleştirilerek yazı 
formatlanır. Format karakterlerinin bazıları şunlardır: 

- d: Tamsayı türler için kullanılır. Sayının değeri decimal olarak formatlanmasını sağlar.
- x veya X: Tamsayı türler için kullanılır. Sayının değerinin hexadecimal olarak formatlanmasını sağlar.
- h veya H: Tamsayı türler için kullanılır. Sayının değerinin hexadecimal olarak formatlanmasını sağlar.
- o: Tamsayı türler için kullanılır. Sayının değerinin octal olarak formatlanmasını sağlar.
- f: Gerçek sayı türleri için kullanılır.
- c: char türler için kullanılır.
- b: boolean türler için kullanılır.
- n: İmleci (cursor) bir sonraki satırın başına çekmek için kullanılır.

Anahtar Notlar: printf metodu gibi kullanılan ancak printf'den daha fazla karşımıza çıkan bazı metodlar için printf metodunun
formatlama detaylarının öğrenilmesi önemlidir.

/*
 *  d, x, X, h, H ve o format karakterleri
 */

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.println("İki sayı giriniz: ");
		int x = kb.nextInt();
		int y = kb.nextInt();
		int result;
				
		System.out.printf("%d + %d =  %d%n", x, y, x + y);
		System.out.printf("%x + %x =  %x%n", x, y, x + y);
		System.out.printf("%X + %X =  %X%n", x, y, x + y);
		System.out.printf("%h + %h =  %h%n", x, y, x + y);
		System.out.printf("%H + %H =  %H%n", x, y, x + y);
		System.out.printf("%o + %o =  %o%n", x, y, x + y);
		
	}
	
}
//
İki sayı giriniz: 
10
20
10 + 20 =  30
a + 14 =  1e
A + 14 =  1E
a + 14 =  1e
A + 14 =  1E
12 + 24 =  36

/* ------------------------------------------------------------------------------------------------------------------------------
Tamsayıya ilişkin format karakterinde % ile format karakteri arasında yazılan sayı hizalamak (alignment) için kullanılabilir.
Bu sayının pozitif olması gerekir. % ile format karakteri arasında yalnızca pozitif bir sayı yazıldığında formatlanan sayının
basamak sayı % ile format karakteri arasındaki sayıdan küçükse soluna verilen sayı kadar space karakteri eklenir. Eğer % ile
format karakteri arasında verilen sayıdan önce sıfır sayısı yazılırsa space yerine sıfır deeğeri ile formatlama yapılır. 
Tamsayılara ilişkin format karakterlerinin başka detaylı kullanımları vardır. Aşağıdaki demo örneği inceleyin.
*/ ------------------------------------------------------------------------------------------------------------------------------
package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.println("İki sayı giriniz: ");
		int day = kb.nextInt();
		int month = kb.nextInt();
		int year = kb.nextInt();
			
		System.out.printf("%02d/%02d/%04d%n", day, month, year);
		System.out.printf("%2d/%2d/%4d%n", day, month, year);
		
	}
}

//
İki sayı giriniz: 
2
12
2001
02/12/2001
 2/12/2001


package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.println("İki sayı giriniz: ");
		int a = kb.nextInt();
		
		System.out.printf("a = %d%na = %08X%n", a,a);
		
	}
}

/*------------------------------------------------------------------------------------------------------------------------------
 *  % karakterinin % olarak formatlanabilmesi için yine % karakteri ile kullanılması gerekir. 
 */------------------------------------------------------------------------------------------------------------------------------

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.println("İki sayı giriniz: ");
		int ratio = kb.nextInt();
		
		System.out.printf("Oran = %%%d%n", ratio);	
	}
}
/*------------------------------------------------------------------------------------------------------------------------------
 *  f format karakteri 
/*------------------------------------------------------------------------------------------------------------------------------

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.println("İki sayı giriniz: ");
		double ratio = kb.nextDouble();
		
		System.out.printf("Oran = %%%f%n", ratio);
		
	}
}

/*------------------------------------------------------------------------------------------------------------------------------
 *  f format karakteri için % ile f arasında . ve pozitif bir sayı yazıldığında ilgili formatlanacak gerçek sayının noktadan 
 *  sonraki kısmının kaç basamak olarak gösterileceği belirlenir. Gerçek sayının geri kalan basamakları bilimsel olarak
 *  yuvarlanarak formatlanır
 */------------------------------------------------------------------------------------------------------------------------------

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.println("İki sayı giriniz: ");
		double ratio = kb.nextDouble();
				
		System.out.printf("Oran = %%%.2f%n", ratio);		
	}	
}

/*------------------------------------------------------------------------------------------------------------------------------
 *  c format karakteri 
 */------------------------------------------------------------------------------------------------------------------------------


package csd;

class App{
	public static void main(String [] args) {
		
		char c;

		c = 68;
		 
		System.out.printf("c = %c%n", c);	
	}	
}
//c = D


/*------------------------------------------------------------------------------------------------------------------------------
 *  b format karakteri 
 */------------------------------------------------------------------------------------------------------------------------------

package csd;

class App{
	public static void main(String [] args) {
		
		boolean b;
		
		b = true;
		 
		System.out.printf("b = %b%n", b);	
	}
}
// b = true





