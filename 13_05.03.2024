/*----------------------------------------------------------------------------------------------------------------------
Sayının noktadan sonraki kısmı yani ondalık kısmının tamamı sıfırsa noktadan sonra sıfır yazılmayabilir. Benzer
şekilde sayının noktadan önceki kısmı yani tam kısmının tamamı sıfırsa noktadan önce sıfır yazılmayabilir. Yani
1.0 sabiti ile 1. sabiti birebir aynıdır, benzer şekilde 0.1 sabiti ile .1 sabiti birebir aynıdır.
----------------------------------------------------------------------------------------------------------------------
*/

package csd;

class App{
	public static void main(String [] args) {
			
		System.out.println(1.); 
		System.out.println(1.0);
		System.out.println(0.1);
		System.out.println(.1);
	}		
}


/*----------------------------------------------------------------------------------------------------------------------
Sabitlerin bilimsel/üstel gösterilişi. Bu tarz yazılan sabitler double türdendir.
----------------------------------------------------------------------------------------------------------------------
*/

package csd;

class App{
	public static void main(String [] args) {
		
		System.out.printf("%f\n",6.02E23); 
	}
		
}
// 602000000000000000000000.000000

package csd;

class App{
	public static void main(String [] args) {
		
		System.out.printf("%.0f\n",6.02e-23); 
		
	}
		
		
}
// 0


package csd;

class App{
	public static void main(String [] args) {
		
	System.out.printf("%.0f\n",6.02E23); // .'dan sonra 0 basamak göster demek
		
	}
}
// 602000000000000000000000

/*----------------------------------------------------------------------------------------------------------------------
Java 7 ile birlikte sabitlerin basamakları arasında _(alttire) karakteri kullanılabilir duruma gelmiştir. Alttire 
karakteri yalnızca basamaklar arasında istenildiği kadar kullanılabilir. Bu kullanım duruma göre okunabilirliği
 artırır.
----------------------------------------------------------------------------------------------------------------------
*/

package csd;

class App{
	public static void main(String [] args) {
		
		int a = 1_111_237_809;
		double b = 345_789.987_789;
		
		System.out.printf("a = %d, b = %f%n", a,b);
		
	}
	
}

/*----------------------------------------------------------------------------------------------------------------------
Tamsayı sabitleri decimal dışında, hexadecimal, octal ve Java 7 ile birlikte binary olarak gösterilebilmektedir.
Sabitin dışında bir ek yoksa decimal, 0x (x küçük veya büyük olabilir) varsa hexadecimal, sıfır varsa octal
ve 0b (b büyük veya küçük olabilir) binary olarak ele alınır. Şüphesiz sayının basamakları sayı sistemine uygun 
olmalıdır. Aksi durumda error oluşue. Aşağıdaki demo örneği inceleyiniz.
----------------------------------------------------------------------------------------------------------------------
*/

package csd;

class App{
	public static void main(String [] args) {
		
		int a = 10;
		int b = 0xA;
		int c = 012;
		int d =0b1010;  //since Java 7
		
		System.out.printf("a = %d, b = %d, c = %d, d = %d", a,b,c,d);
		
	}	
}

//a = 10, b = 10, c = 10, d = 10

/*----------------------------------------------------------------------------------------------------------------------
Sayı sistemi ile gösterilişte de alttire karakteri konabilir. Alttire karakteri basamakların arasına gelebileceğinden
sabitin önekinden önce veya sonra kullanılması error oluşturur. Bunun bir tek istisna durumu octal sabitin öneki
olan sıfır'dan sonra alttire karakteri konulabilir.
----------------------------------------------------------------------------------------------------------------------
*/


/*----------------------------------------------------------------------------------------------------------------------
Aşağıdaki örnekte sabitin octal olarak yazıldığına dikkat ediniz.
----------------------------------------------------------------------------------------------------------------------
*/

package csd;

class App{
	public static void main(String [] args) {
		
		int a = 012;

		System.out.printf("a = %d", a);	
	}	
}


/*----------------------------------------------------------------------------------------------------------------------
Operatörler (Operators): Belirli bir işleme yol açan, işlem sonucunda bir değer üreten atomlardır. Bir öperatör ile 
işleme giren idadelere (expression) operand denir. Bir operatörün öğrenilmesi için aşağıdaki özelliklerin incelenmesi
gerekir:

- Operatörlerin sınıflandırılması:	
	1. İşlevine göre sınıflandırma
		- Aritmetik operatörler (arithmetic operators)
		- Karşılaştırma operatörleri (comparison operators)
		- Mantıksal operatörler (logical operators)
		- Bitsel operatörler (bitwise operators)
		- Özel amaçlı operatörler (special purpose operators)
	2. Operand sayısına göre sınıflandırma
		- Tek operandlı (unary)
		- İki operandlı (binary)
		- Üç operandlı (ternary)
	3. Operatörün konumuna göre sınıflandırma
		- Önek (prefix)
		- Araek (infix)
		- Sonek (postfix)

	- Operatörün ürettiği değer (product value): İşlem sonucunda elde edilen değerdir. Bir operatör hariç bütün 
operatörler bir değer üretir.
	
	- Operatörün kısıtı (constraint) var mı?: Operatörün kullanımına ilişkin bir takım zorunluluklardır.
	
	- Operatörün yan etkisi (side effect): Operatörün operandının değerini değiştirip değiştirmediği.
	
	- Operatörün önceliği (precedence): Operatörün ifadede diğer operatörlere göre işlem sırasıdır. 
		x = y + z * t
	işleminin yapılış sırası şöyledir
		i1: z * t
		i2: y + i1
		i3: x = i2
	Bir işlemi önceliklendirmek için matematikteki gibi önceliklendirme parantezi kullanılır. Örneğin: 
		x = (y + z) * t
	işleminin yapılış sırası şöyledir
		i1: y + z
		i2: i1 * t
		i3: x = i2
		
	Bazı operatörler aynı öncelik seviyesinde olabilirler. Bu durumda aynı öncelik seviyesine sahip operatörlerin
	aynı ifadede bulunması durumunda işlemin hangi sırada yapılacağını belirleyen "associativity" denilen bir kavram
	kullanılır. Bu anlamda "left associative" ve "right associative" kavramları sırasıyla "soldan sağa öncelik" ve 
	"sağdan sola öncelik" anlamına gelr. Örneğin:
		x = y + z - t
	işleminin yapılış sırası + ve - opertrleri aynı öncelik seviyesinde ve left associative olduklarından şöyledir:
		i1: y + z
		i2: i1 - t
		i3: x = i2
		
	
	Anahtar Notlar: Java'da öncelik her zaman işlem sırasını da belirlemez. Bu durumun detayları konu içerisinde
	ele alınacaktır.
	
	
Biz de bir operatörü öğrenirken bu özellikleri inceleyeceğiz 
----------------------------------------------------------------------------------------------------------------------
*/



/*----------------------------------------------------------------------------------------------------------------------
Aritmetik 4 işlem operatörleri (+, -, *, /) iki operandlı ve araek durumundadır. Operatörler işlemin sonucuna ilişkin
değeri üretirler. Bu operatörlerin yan etkisi yoktur. * ve / operatörleri, + ve - operatörlerinden yüksek önceliklidir.
Aritmetik 4 işlem operatörleri soldan sağa önceliklidir. İlgili operatöre ilişkin geçerli işlemler kısıt olarak 
düşünülebilir. Örn: iki string toplanabilir ancak çarpılamaz bu, çarpma operatörünün kısıtıdır. 
----------------------------------------------------------------------------------------------------------------------
*/

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.println("İki sayı giriniz:");
		int a = kb.nextInt();
		int b = kb.nextInt();
		
		System.out.printf("%d + %d = %d%n", a,b,a+b);
		System.out.printf("%d - %d = %d%n", a,b,a-b);
		System.out.printf("%d * %d = %d%n", a,b,a*b);
		System.out.printf("%d + %d = %d%n", a,b,a/b);
		
	}
	
}

!!İşlem önceliği ile işlemin yapılış sırası her zaman aynı değildir.!!

/*----------------------------------------------------------------------------------------------------------------------
Mod operatörü (%) aslında bir çeşit bölme işlemi yapar. Bu sebeple özellikleri ürettiği değer dışında bölme operatörü
ile aynıdır(seviyesi de dahil). Bu operatör birinci operandınının ikinci operandına bölümünden elde edilen kalan 
değerini verir. Bu operatörün ikinci operandının işaretinin bir önemi yoktur. Yani ikinci operandı negatif bile olsa 
pozitif değeri ile işlem yapılır. Bu operatörün birinci operandı negatif ise işlem şu şekilde yapılır: Birinci operandın
pozitif olduğu değere göre kalan değerinin ters işareti alınır. Yani bu operatörün ürettiği değerin işareti birinci 
operandının işareti ile aynıdır. Yani sonuç olarak bu operatör negatif operandlar için matematikteki mod alma işlemi 
ile aynı değildir. Bazı programlama dillerinde gerçek sayılar için mod operatörü kullanılamaz. Ancak Java'da böyle bir 
kısıt yoktur. Pratikte bu operatörler daha çok tamsayılarda kullanılır. Aşağıdaki demo örneği inceleyiniz.
----------------------------------------------------------------------------------------------------------------------
*/

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.println("İki sayı giriniz:");
		int a = kb.nextInt();
		int b = kb.nextInt();
		
		System.out.printf("%d %% %d = %d%n", a,b,a%b);
		
	}
	
}
// -10 3
-10 % 3 = -1

// 10 -3
10 % -3 = 1

/*----------------------------------------------------------------------------------------------------------------------
Sınıf Çalışması: Parametresiyle aldığı int türden 3 basamaklı bir sayının basamakları toplamına geri dönen 
sumOf3Digits metodunu NumberUtil isimli sınıf içerisinde aşağıdaki açıklamalara göre yazınız ve test ediniz
Açıklamalar:
  - Metot sayının 3 basamaklı olup olmadığının kontolünün yapmayacaktır.
  - Metot negatif sayılar için de pozitif toplam değerine geri dönecektir.
----------------------------------------------------------------------------------------------------------------------
*/

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		NumberUtilSumOf3DigitsTest.run();
		
	}
	
}
class NumberUtilSumOf3DigitsTest{
	public static void run() {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.println("Bir sayı giriniz: ");
		int a = kb.nextInt();
		
		System.out.printf("%d sayısının basamakları toplamı: %d%n", a,NumberUtil.sumOf3Digits(a));
		
	}
}

class NumberUtil{
	public static int sumOf3Digits(int val) 
	{
		int a = val / 100;
		int b = val % 100 / 10;
		int c = val % 10;
		
		return Math.abs(a + b + c);
		
	}	
}


