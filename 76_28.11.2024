/*----------------------------------------------------------------------------------------------------------------------
  UML yazma uygulamaları: Gaphor, umbrello 
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
A holds B ilişkisi composition ilişkisinin kurallarından en az bir tanesinin genel olarak gerçeklenmediği bütünsel 
kullanım ilişkisidir. A holds a B ilişkisinin sınıf diagramı şu şekildedir:
https://github.com/oguzkaran/Java-Jan-2024/blob/main/doc/media/Aggregation.PNG

Taksi ve sürücü gibi, sürücü hayatına taksiyle başlamıyo, taksinin başka sürücüsü de olabilir sürücü değişebilir.

A ile B arasındaki aggregation ilişkinin genel bir implementasyonu:

package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        B b1 = new B(/*...*/);
        A x = new A(b1/*...*/);

        x.doWork1();
        x.doWork2();

        B b2 = new B(/*...*/);

        x.setB(b2);
        
        x.doWork1();
        x.doWork2();

    }
}

class A {
    private B m_b;

    public A(B b/*...*/)
    {
        m_b = b; // b1 ya da b2 nesneleri burada yaratılmadı yukarıda yaratıldı yani A'dan bağımsız ömrüne A ile başlamadı
    }

    public B getB ()
    {
        return m_b;
    }

    public void setB(B b)
    {
        m_b = b;    // o yüzden setter ve getter da var istenildiği zaman sürücü değişebilir de
    }

    public void doWork1()
    {
        //...
        m_b.doSomething();
    }

    public void doWork2()
    {
        //...
        m_b.doSomething();
    }
}

class B {
    //...
    public void doSomething()
    {
        //...
    }
}
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
Association: A nesnesinin B nesnesini ihtiyacı olduğunda kullanması yani bütünsel kullanmaması ilişkisidir. Buradaki 
kullanım parçalı kullanım (partial usage) biçimindedir. A holds a B ilişkisinin sınıf diagramı şu şekildedir:
https://github.com/oguzkaran/Java-Jan-2024/blob/main/doc/media/Association.PNG

A ile B arasındaki association ilişkinin genel bir implementasyonu:

package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        B b1 = new B(/*...*/);
        B b2 = new B(/*...*/);
        A x = new A(/*...*/);

        x.doWork(b1);
        x.doWork(b2);
    }
}

class A {
    
    public void doWork(B b)
    {
        //...
        b.doSomething();
    }
}

class B {
    //...
    public void doSomething()
    {
        //...
    }
}
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
Aşağıdaki demo örneği aşağıdaki sınıf şeması doğrultusunda inceleyiniz: 
https://github.com/oguzkaran/Java-Jan-2024/blob/main/doc/media/DemoRaceAppClasses.PNG

Aşağıdaki demo örneği aşağıdaki sınıf şeması doğrulltusunda inceleyiniz:
Demo örnekte bazı detaylar gözardı edilmiştir:
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        DemoRaceApp.run();
    }
}

class DemoRaceApp {
    public static void run()
    {
        Driver driver = new Driver(/*...*/);

        driver.setName("Arman Koca");
        driver.setRating(100);

        Car car = new Car(driver/*...*/);

        car.run();

        Pilot [] pilots = {new Pilot(1, 10000, "Elif Kılıç"), new Pilot(2, 50000, "Günay Akıncı"), new Pilot(3, 2500, "İsmail Enes Doğru")};
        Plane plane = new Plane(4, pilots/*...*/);

        plane.fly();
    }
}

class Plane {
    private final Engine [] m_engines;
    private Pilot [] m_pilots;

    //...

    public Plane(int n, Pilot [] pilots/*...*/)
    {
        m_engines = new Engine[n];
        m_pilots = pilots;

        for (int i = 0; i < n; ++i)
            m_engines[i] = new Engine(/*...*/); //dizinin yaratılması yetmiyor, her bir referansın gösterdiği nesnenin de yaratılması gerekiyo
                                                // yoksa error (referans dizileri konusu)
    }

    private void startEngines()
    {
        for (Engine e : m_engines)
            e.startEngine();
    }

    private void accelerateEngines()
    {
        for (Engine e : m_engines)
            e.accelerateEngine();
    }

    private void slowEngines()
    {
        for (Engine e : m_engines)
            e.slowEngine();
    }

    private void stopEngines()
    {
        for (Engine e : m_engines)
            e.stopEngine();
    }


    public void fly()
    {
        for (Pilot pilot : m_pilots)
            System.out.printf("%d, %s, %d%n", pilot.getTitle(), pilot.getName(), pilot.getFlightDuration());

        startEngines();
        accelerateEngines();

        //...
        System.out.println("flying");

        slowEngines();
        stopEngines();
    }
}

class Car {
    private final Engine m_engine;
    private Driver m_driver;

    //...

    public Car(Driver driver/*...*/)
    {
        m_engine = new Engine(/*...*/);
        m_driver = driver;
    }

    public Driver getDriver()
    {
        return m_driver;
    }

    public void setDriver(Driver driver)
    {
        m_driver = driver;
    }

    public void brake()
    {
        m_engine.slowEngine();
    }

    public void run()
    {
        System.out.printf("Driver:%s, %d%n", m_driver.getName(), m_driver.getRating());
        m_engine.startEngine();
        m_engine.accelerateEngine();

        //...
        System.out.println("running");

        brake();
        m_engine.stopEngine();
    }
}

class Pilot {
    private int m_title;
    private int m_flightDuration;
    private String m_name;

    //...


    public Pilot(int title, int flightDuration, String name)
    {
        m_title = title;
        m_flightDuration = flightDuration;
        m_name = name;
    }

    public int getTitle()
    {
        return m_title;
    }

    public void setTitle(int title)
    {
        m_title = title;
    }

    public int getFlightDuration()
    {
        return m_flightDuration;
    }

    public void setFlightDuration(int flightDuration)
    {
        m_flightDuration = flightDuration;
    }

    public String getName()
    {
        return m_name;
    }

    public void setName(String name)
    {
        m_name = name;
    }
}

class Driver {
    private String m_name;
    private int m_rating;

    //...

    public String getName()
    {
        return m_name;
    }

    public void setName(String name)
    {
        m_name = name;
    }

    public int getRating()
    {
        return m_rating;
    }

    public void setRating(int rating)
    {
        m_rating = rating;
    }
}

class Engine {
    //...

    public void startEngine()
    {
        System.out.println("Start Engine");
    }

    public void accelerateEngine()
    {
        System.out.println("Accelerate Engine");
    }

    public void slowEngine()
    {
        System.out.println("Slow Engine");
    }

    public void stopEngine()
    {
        System.out.println("Stop Engine");
    }
}
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
Aşağıdaki demo örneği aşağıdaki sınıf şeması doğrulltusunda inceleyiniz:
https://github.com/oguzkaran/Java-Jan-2024/blob/main/doc/media/DemoTaxiAutomationApp.PNG
Demo örnekte bazı detaylar gözardı edilmiştir:
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
package org.csystem.app;  
  
class App {  
    public static void main(String[] args)  
    {  
        DemoRaceApp.run();  
    }  
}  
  
class DemoRaceApp {  
    public static void run()  
    {  
        Driver driver = new Driver();  
  
        driver.setName("Oğuz Karan");  
        driver.setRating(100);  
        Taxi taxi = new Taxi(driver/*...*/);  
        Client client1 = new Client("kaanaslan", "Kaan Aslan");  
        Client client2 = new Client("aliserce", "Ali Vefa Serçe");  
  
        taxi.take(client1);  
  
        //...  
  
        taxi.take(client2);  
    }  
}  
  
  
class Taxi {  
    private Driver m_driver;  
  
    //...  
  
    public Taxi(Driver driver/*...*/)  
    {  
        m_driver = driver;  
    }  
  
    public Driver getDriver()  
    {  
        return m_driver;  
    }  
  
    public void setDriver(Driver driver)  
    {  
        m_driver = driver;  
    }  
  
    public void take(Client client)  
    {  
        System.out.printf("Driver:%s, %d%n", m_driver.getName(), m_driver.getRating());  
        System.out.printf("Client:%s%n", client.getUsername());  
  
        //...  
    }  
}  
  
class Client {  
    private String m_username;  
    private String m_name;  
    //...  
  
  
    public Client(String name, String username)  
    {  
        m_name = name;  
        m_username = username;  
    }  
  
    public String getUsername()  
    {  
        return m_username;  
    }  
  
    public void setUsername(String username)  
    {  
        m_username = username;  
    }  
  
    public String getName()  
    {  
        return m_name;  
    }  
  
    public void setName(String name)  
    {  
        m_name = name;  
    }  
}  
  
class Driver {  
    private String m_name;  
    private int m_rating;  
  
    //...  
  
    public String getName()  
    {  
        return m_name;  
    }  
  
    public void setName(String name)  
    {  
        m_name = name;  
    }  
  
    public int getRating()  
    {  
        return m_rating;  
    }  
  
    public void setRating(int rating)  
    {  
        m_rating = rating;  
    }  
}  
  
class Engine {  
    //...  
  
    public void startEngine()  
    {  
        System.out.println("Start Engine");  
    }  
  
    public void accelerateEngine()  
    {  
        System.out.println("Accelerate Engine");  
    }  
  
    public void slowEngine()  
    {  
        System.out.println("Slow Engine");  
    }  
  
    public void stopEngine()  
    {  
        System.out.println("Stop Engine");  
    }  
}
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
Inheritance (is a): Biyoloji'den programlamlaya aktarılmıştır. Biyoloji'de inheritance ebeveynin (parent) özelliklerinin
çocuğuna (child) aktarımı olarak tanımlanabilir.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
EN ÖNEMLİ KURALIMIZ DRE (Don't repeat yourself)!
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/

