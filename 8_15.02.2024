Java'da klavyeden okuma yapmak (aslında stdin'den okuma yapmak) için pek çok sınıf ve metot bulunmaktadır. Biz kursumuzda
ağırlıklı olarak Scanner ismli bir sınıfın nextXXX metotlarını kullanacağız. Belirli konulara gelene kadar bu kullanımlar 
birer kalıp biçiminde düşünülmelidir. Kullanılan kalıpların detayları ileride anlaşılacaktır. Kullanılan kalıplarda IDE'nin 
static kod analizi ya da derleyici bir takım uyarılar(warnings) verebilecektir. Aksi belirtilmediği sürece bu uyarılar dikkate
alınmayacaktır.

Bu kalıplarda ilgili türden giriş yapılmadığı durumlarda exception oluşur.

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki klavyeden int türden değer okuma kalıbında değerler aralarında en az bir tane whitespace karakter olacak
	şekilde girilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String[] args) 
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("İki sayı giriniz:");
		int a = kb.nextInt();
		int b = kb.nextInt();
		int total;
		
		total = a + b;
		System.out.println(total);		
	}
}
/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki klavyeden int türden değer okuma kalıbında değerler ENTER karakteri ile ayrılacak şekilde girilmelidir. 
	Diğer whitespace karakterlerin kullanımı exception oluşturur
----------------------------------------------------------------------------------------------------------------------*/

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Birinci  sayıyı giriniz: ");
		int a = Integer.parseInt(kb.nextLine());
		System.out.print("İkinci  sayıyı giriniz: ");
		int b = Integer.parseInt(kb.nextLine());
		int total;
		total = a+b;
		System.out.println(total);
		
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki klavyeden double türden değer okuma kalıbında değerler aralarında en az bir tane whitespace karakter olacak
	şekilde girilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String[] args) 
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("İki sayı giriniz:");
		double a = kb.nextDouble();
		double b = kb.nextDouble();
		double total;
		
		total = a + b;
		System.out.println(total);		
	}
}
-----------------------------------------------------------------------------------------------------------------------
Aşağıdaki klavyeden double türden değer okuma kalıbında değerler ENTER karakteri ile ayrılacak şekilde girilmelidir.
Diğer whitespace karakterlerin kullanımı exception oluşturur.
-----------------------------------------------------------------------------------------------------------------------

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Birinci  sayıyı giriniz: ");
		double a = Double.parseDouble(kb.nextLine());
		System.out.print("İkinci  sayıyı giriniz: ");
		double b = Double.parseDouble(kb.nextLine());
		double total;
		total = a+b;
		System.out.println(total);
		
	}	
}
/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki klavyeden long türden değer okuma kalıbında değerler aralarında en az bir tane whitespace karakter olacak
	şekilde girilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String[] args) 
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("İki sayı giriniz:");
		long a = kb.nextLong();
		long b = kb.nextLong();
		long total;
		
		total = a + b;
		System.out.println(total);		
	}
}
/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki klavyeden double türden değer okuma kalıbında değerler ENTER karakteri ile ayrılacak şekilde girilmelidir. 
	Diğer whitespace karakterlerin kullanımı exception oluşturur
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String[] args) 
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Birinci sayıyı giriniz:");
		long a = Long.parseLong(kb.nextLine()); 
		
		System.out.print("İkinci sayıyı giriniz:");
		long b = Long.parseLong(kb.nextLine());
		long total;
		
		total = a + b;
		System.out.println(total);		
	}
}

İfade(expression): Sabitlerden, operatörlerden ve değişkenlerden oluşan herhangi bir kombinasyona ifade denir. Bir ifade yalnızca
sabitlerden ve operatörlerden oluşuyorsa bu ifadeye "constant expression" denir. Bir değişken ve sabit tek başına ifadedir. Ancak
bir operatör tek başına bir ifade olamaz. Her ifadenin bir türü vardır 

Bir metodun geri dönüş değeri bilgisi yerine bir tür ismi yazılırsa, bu metodun geri dönüş değeri (return value) vardır denir. 
Tersinde bir metodun geri dönüş değeri varsa geri dönüş değeri bilgisi yerine bir tür yazılır. Bir metodun geri dönüş değeri varsa,
o metodun çağrısı bittiğinde çağrılan noktaya bir değer ile geri döner. Bir metodun geri dönüş değeri yoksa çağrılan noktaya yalnızca 
geri döner, bir değer aktarılmaz.Bir metodun geri dönüş değeri yoksa geri dönüş değeri bilgisi yerine void anahtar sözcüğü yazılır.
Bir metodun geri dönüş değeri metot içerisinde return deyimi ile oluşturulur. return deyiminin genel biçimi şu şekildedir:
	return [ifade];
Görüldüğü gibi return deyimi tek başına veya bir ifade ile kullanılabilir. Bu kullanımların detayları bölüm içerisinde anlaşılacaktır.
return deyimi nasıl kullanılırsa kullanılsın, akış return deyimine geldiğinde metot sonlanır. Yani return deyiminin birinci görevi 
metodu sonlandırmaktır. return deyimi ifade ile kullanılmışsa ifadenin değeri çağrılan noktaya aktarılır. Buna geri dönüş değeri
denmesinin nedeni budur.

----------------------------------------------------------------------------------------------------------------------------------
Aşağıdaki demo örnekte add metodu çağrıldığında kullanıcıdan iki değer istenmiş ve o değerlerin toplamına geri dönülmüştür. main
metodu içerisinde ise add metodu çağrılmış, geri dönül değeri 2 ile çarpılıp sonuç result değişkenine atanmıştır.
----------------------------------------------------------------------------------------------------------------------------------

package csd;

class App{
	public static void main(String [] args) {
		
		int result;
		
		result = Util.add() * 2;
		
		System.out.println(result);
	}
	
}

class Util{
	public static int add() {
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("İki sayı giriniz: ");
		int a = kb.nextInt();
		int b = kb.nextInt();
		int total = a+b;
		
		return total;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Geri dönüş değeri olan bir metot içerisinde return deyiminin tek başına kullanımı geçersizdir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class Util {
	public static int add()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("İki sayı giriniz:");
		int a = kb.nextInt();
		int b = kb.nextInt();
		int total;
		
		total = a + b;
		
		return;	//error	
	}
}
----------------------------------------------------------------------------------------------------------------------------------
Geri dönüş değeri olan bir metot içerisinde akışın her noktasında metodun return edebilmesi gerekir. Yani derleyici
açısından, metodun geri dönüş değeri varsa metot içerisinde metodun bir değer döndüremeyeceği bir durum oluşmamalıdır 
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
Aşağıdaki geri dönüş değeri olan add metodunda bir değer döndürülmediği için error oluşur
----------------------------------------------------------------------------------------------------------------------------------
class Util{
	public static int add() {
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("İki sayı giriniz: ");
		int a = kb.nextInt();
		int b = kb.nextInt();
		int total = a+b;
		
	}
}
/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki demo örnekte geri dönüş değeri olan add metodunda total > 10 koşulu gerçeklenmediğinde metot bir değere 
	dönemeyeceğinden dolayı error oluşur 
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class Util{
	public static int add() {
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("İki sayı giriniz: ");
		int a = kb.nextInt();
		int b = kb.nextInt();
		int total = a+b;

		if (total > 10)
			return total;	
	
	}
}

----------------------------------------------------------------------------------------------------------------------------------
Aşağıdaki örnekte return deyimine ilişkin ifadenin değeri a ile b'nin değerlerinin toplamından elde edilmiştir. Bu tarz ifadelerde 
okunulabilirliğin/algılanabilirliğin olumsuz etkilenmesine dikkat edilmelidir.
----------------------------------------------------------------------------------------------------------------------------------
package csd;

class App {
	public static void main(String[] args) 
	{
		int result;
		
		result = Util.add() * 2;
		
		System.out.println(result);						
	}
}
class Util{
	public static int add() {
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("İki sayı giriniz: ");
		int a = kb.nextInt();
		int b = kb.nextInt();

		return a + b;
		
	}
}

----------------------------------------------------------------------------------------------------------------------------------
Aşağıdaki demo örnekte add metodunun geri dönüş değeri getInt metodunun geri dönüş değeri yapılmıştır. Yani, getInt metodu add metodu
çağrıldıktan sonra elede edilen değere geri dönmektedir.
----------------------------------------------------------------------------------------------------------------------------------
package csd;

class App{
	public static void main(String [] args) {
		
		int result;
		
		result = Sample.getInt();
		
		System.out.println(result);
		
	}
}
class Sample {
	public static int getInt() {
		
		System.out.print("Bir tam sayı girmeniz gerekiyor: ");
		return Util.add();
	}
}
class Util{
	public static int add() {
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		int a = kb.nextInt();
		int b = kb.nextInt();
		int total = a+b;
		
		return total;
		
	}
}

----------------------------------------------------------------------------------------------------------------------------------
Metot çağrısı için derleyici geçisi değişken (temporary variable) yaratan ve işleme sokulan bir kod üretir. Geçici değişkenin türü
çağrılan metodun geri dönüş değeri türü ile aynıdır. Aşağıdaki demo örnekte *** ile belirtile deyimi deyim için üretilen kod şu 
şekildedir:
	int temp = Util.add();

	result = temp * 2;

!! Bu durumda geri dönüş değeri olan bir metot çağrısı geçici değişkene yapılan bir ATAMA işlemidir.
----------------------------------------------------------------------------------------------------------------------------------
package csd;

class App {
	public static void main(String[] args) 
	{
		int result;
		
		result = Util.add() * 2; //***
		
		System.out.println(result);						
	}
}

class Util {
	public static int add()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("İki sayı giriniz:");
		int a = kb.nextInt();
		int b = kb.nextInt();
		
		return a + b;
	}
}

----------------------------------------------------------------------------------------------------------------------------------
Metodu çağıran kişi metodun ne yaptığını bilmeli nasıl yaptığını bilmesi önemli değil.
Geri dönüş değeri olan bir metot geri dönüş değeri yokmuş gibi yani geri dönüş değeri işleme sokulmadan çağrılabilir. Şüphesiz
metodun da buna uygun olması gerekir. Aşağıdaki add metodu toplam değerini  ekrana bastığı için ve motodu çağıran kod da yalnızca
ekrana basma kısmı ile ilgilendiğinden metodu doğrudan çağırmaktadır. Demo örnekteki add metodu toplam değerini ekrana basmasaydı, 
yani sadece geri döndürseydi, doğrudan çağrrılmasının algoritmik açıdan etkisi olur mu? System.out.println(result); olmasaydı
hiçbir etkisi olmayacaktı programa. Ama etkisi hiç önemli değil ben sadece kaydetmesini istiyorum dersen öylesine çağırabilirsin, 
System.out.println(result); olmayan metodu da.

----------------------------------------------------------------------------------------------------------------------------------

class App{
	public static void main(String [] args) {
		
		Util.add();
		
	}
}

class Util{
	public static int add() {
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		int a = kb.nextInt();
		int b = kb.nextInt();
		int total = a+b;

		System.out.println(result);
		return total;
		
	}
}
