Java'da klavyeden okuma yapmak (aslında stdin'den okuma yapmak) için pek çok sınıf ve metot bulunmaktadır. Biz kursumuzda
ağırlıklı olarak Scanner ismli bir sınıfın nextXXX metotlarını kullanacağız. Belirli konulara gelene kadar bu kullanımlar 
birer kalıp biçiminde düşünülmelidir. Kullanılan kalıpların detayları ileride anlaşılacaktır. Kullanılan kalıplarda IDE'nin 
static kod analizi ya da derleyici bir takım uyarılar(warnings) verebilecektir. Aksi belirtilmediği sürece bu uyarılar dikkate
alınmayacaktır.

Bu kalıplarda ilgili türden giriş yapılmadığı durumlarda exception oluşur.



package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Birinci  sayıyı giriniz: ");
		int a = Integer.parseInt(kb.nextLine());
		System.out.print("İkinci  sayıyı giriniz: ");
		int b = Integer.parseInt(kb.nextLine());
		int total;
		total = a+b;
		System.out.println(total);
		
	}
}


-----------------------------------------------------------------------------------------------------------------------
Aşağıdaki klavyeden double türden değer okuma kalıbında değerler ENTER karakteri ile ayrılacak şekilde girilmelidir.
Diğer whitespace karakterlerin kullanımı exception oluşturur.
-----------------------------------------------------------------------------------------------------------------------

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Birinci  sayıyı giriniz: ");
		double a = Double.parseDouble(kb.nextLine());
		System.out.print("İkinci  sayıyı giriniz: ");
		double b = Double.parseDouble(kb.nextLine());
		double total;
		total = a+b;
		System.out.println(total);
		
	}	
}

İfade(expression): Sabitlerden, operatörlerden ve değişkenlerden oluşan herhangi bir kombinasyona ifade denir. Bir ifade yalnızca
sabitlerden ve operatörlerden oluşuyorsa bu ifadeye "constant expression" denir. Bir değişken ve sabit tek başına ifadedir. Ancak
bir operatör tek başına bir ifade olamaz. Her ifadenin bir türü vardır 

Bir metodun geri dönüş değeri bilgisi yerine bir tür ismi yazılırsa, bu metodun geri dönüş değeri (return value) vardır denir. 
Tersinde bir metodun geri dönüş değeri varsa geri dönüş değeri bilgisi yerine bir tür yazılır. Bir metodun geri dönüş değeri varsa,
o metodun çağrısı bittiğinde çağrılan noktaya bir değer ile geri döner. Bir metodun geri dönüş değeri yoksa çağrılan noktaya yalnızca 
geri döner, bir değer aktarılmaz.Bir metodun geri dönüş değeri yoksa geri dönüş değeri bilgisi yerine void anahtar sözcüğü yazılır.
Bir metodun geri dönüş değeri metot içerisinde return deyimi ile oluşturulur. return deyiminin genel biçimi şu şekildedir:
	return [ifade];
Görüldüğü gibi return deyimi tek başına veya bir ifade ile kullanılabilir. Bu kullanımların detayları bölüm içerisinde anlaşılacaktır.
return deyimi nasıl kullanılırsa kullanılsın, akış return deyimine geldiğinde metot sonlanır. Yani return deyiminin birinci görevi 
metodu sonlandırmaktır. return deyimi ifade ile kullanılmışsa ifadenin değeri çağrılan noktaya aktarılır. Buna geri dönüş değeri
denmesinin nedeni budur.

----------------------------------------------------------------------------------------------------------------------------------
Aşağıdaki demo örnekte add metodu çağrıldığında kullanıcıdan iki değer istenmiş ve o değerlerin toplamına geri dönülmüştür. main
metodu içerisinde ise add metodu çağrılmış, geri dönül değeri 3 ile çarpılıp sonuç result değişkenine atanmıştır.
----------------------------------------------------------------------------------------------------------------------------------

package csd;

class App{
	public static void main(String [] args) {
		
		int result;
		
		result = Util.add() * 2;
		
		System.out.println(result);
	}
	
}

class Util{
	public static int add() {
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("İki sayı giriniz: ");
		int a = kb.nextInt();
		int b = kb.nextInt();
		int total = a+b;
		
		return total;
	}
}
----------------------------------------------------------------------------------------------------------------------------------
Geri dönüş değeri olan bir metot içerisinde return deyiminin tek başına kullanımı geçersizdir. Yani derleyici açısından, metodun
geri dönüş değeri varsa metot içerisinde metodun bir değer döndüremeyeceği bir durum oluşmamalıdır. 
----------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------
Aşağıdaki geri dönüş değeri olan add metodunda bir değer döndürülmediği için error oluşur
----------------------------------------------------------------------------------------------------------------------------------
class Util{
	public static int add() {
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("İki sayı giriniz: ");
		int a = kb.nextInt();
		int b = kb.nextInt();
		int total = a+b;
		
	}
}


class Util{
	public static int add() {
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("İki sayı giriniz: ");
		int a = kb.nextInt();
		int b = kb.nextInt();
		int total = a+b;
		if (total>10

		
	}
}

----------------------------------------------------------------------------------------------------------------------------------
Aşağıdaki örnekte return deyimine ilişkin ifadenin değeri a ile b'nin değerlerinin toplamından elde edilmiştir. Bu tarz ifadelerde 
okunulabilirliğin/algılanabilirliğin olumsuz etkilenmesine dikkat edilmelidir.
----------------------------------------------------------------------------------------------------------------------------------

class Util{
	public static int add() {
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("İki sayı giriniz: ");
		int a = kb.nextInt();
		int b = kb.nextInt();

		return a+b;
		
	}
}







