/*----------------------------------------------------------------------------------------------------------------------
    Inheritance İlişkisi:
Bu ilişkiye NYPT'de is a ilişkisi de denilmektedir. Bu ilişki ile varolan bir sınıfın kodlarına dokunmadan (kodları
elimizde olabilir ya da olmayabilir) genişletme (extension) yapılabilir. Bu ilişkiye aynı zamanda generalization da 
denilmektedir. Bu ilişkiye Türkçe olarak türetme/kalıtım ilişkisi diyeceğiz. Örneğin analitik düzlemde bir çemberi temsil 
eden (yarıçap, alan, çevre, merkez koordinatları vb bilgilerle) bir sınıf yazacak olalım. Anımsanacağı gibi daha önce 
yazdığımız Circle sınıfı sentetik geometride bir çemberi (dolayısıyla daireyi) temsil etmektedir. Yani, elimizde daha 
önceden yazılmış ve test edilmiş bir sınıf bulunmaktadır. Analitik düzlemde bir çemberde analitik özellikleri dışından 
bir  çember olduğundan (Analytical circle is a circle), AnalyticalCircle isimli bir sınıf Circle sınıfından türetilebilir. 
Bu anlamda bu ilişki SOLID ilkelerinden Open Closed Principle'ın mottosu olan open for extension closed for modification 
cümlesi de karşılamaktadır.

A sınıfından B sınıfı türetilmiş olsun (B is an A). Bu durumda A sınıfına B sınıfının taban sınıfı (base class), B'ye ise
A'nın bir türemiş sınıfı (derived class) denir. Java'da base class yerine daha çok super class, derived class yerine ise
daha çok sub class terimleri kullanılır. Bu terimlerle birlikte NYPT'de base class yerine parent class, derived class 
yerine child class terimleri de kullanılmaktadır. B is an A ilişkisinin sınıf diyagramı şu şekildedir:
https://github.com/oguzkaran/Java-Jan-2024/blob/main/doc/media/Inheritance.PNG

Bir dizi türeme de söz konusu olabilir:
https://github.com/oguzkaran/Java-Jan-2024/blob/main/doc/media/Inheritance2.PNG

Burada C'nin taban sınıfı (super class) dendiğinde doğrudan taban sınıfı (direct super class) anlaşılır. Yani C'nin taban 
sınıfı B'dir. Burada A C'nin dolaylı taban sınıflarından (indirect super class) biridir. Burada C'nin taban sınıflarından 
bir A'dır (One of the super class of C is A) veya A, C'nin taban sınıfır (A is super class of C) cümleleri YANLIŞTIR. Bu 
cümlelerin doğrusu C'nin dolaylı taban sınıflarından bir A'dır (One of the indirect super class of C is A). Çünkü, C'nin
taban sınıfı B'dir. (C'nin birden fazla parent'ı yok yani yalnızca B C'nin parent'ı)
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
Örneğin, Vehicle kavramı taşıma özelliğine sahip olsun. Bu domain'de bir deniz aracı, deniz'e ilişkin özelliklerin 
yanında taşıma özelliğine'de sahip olduğundan Marine Vehicle is a vehicle denebilir. Benzer şekilde kara aracı ve hava 
aracı için de aynı durum söz konusudur. Bu hiyerarşide bir gemi, bir deniz aracı olarak nitelendirilebilir. Bu hiyerarşiye 
ilişkin örnek bazı sınıflara ilişkin şema aşağıdaki gibi olabilir:
https://github.com/oguzkaran/Java-Jan-2024/blob/main/doc/media/Vehicles.PNG

Burada dikkat edilirse Vehicle'dan aşağı inildikçe bir özelleşme (specialization), Vehicle'a doğru çıkıldıkça bir 
genelleşme (generalization) söz konusudur. Bir sınıfın birden fazla (doğrudan) taban sınıfı olması durumuna multiple 
inheritance denir. Java'da bir sınıfın yalnızca bir tane taban sınıfı vardır. Bu anlamda Java çoklu türetme yoktur.
Aslında çoklu türetmenin programlamada bir karşılığı yoktur. Bu anlamda Java'da ileride göreceğimiz arayüzler (interfaces)
ile çoklu türetme belirli ölçülerde (pratikteki isterleri karşılayacak kadar) desteklenmektedir. Yani Java'da çoklu 
türetmenin olmaması bir eksiklik oluşturmaz. Örneğin Vehicle hiyerarşisinde deniz uçağı (float plane) hem deniz aracı 
hem de hava aracı değildir. Deniz uçağı, hava aracıdır. Bu anlamda deniz uçağı için çoklu türetme söz konusu olmaz. 

Bir sınıf kendisinden doğrudan ya da dolaylı olarak türetilemez. Yani türetme ilişkisinde döngüsellik söz konusu değildir.

Java'da türetme extends anahtar sözcüğü ile yapılır. Türetme işleminde taban sınıfın elemanları türemiş sınıfa aktarılmış
olur. Örneğin taban sınıfta olan bir metot türemiş sınıfa da aktarılır.Benzer şekilde ver elemanları da türemiş sınıfa 
aktarılır. Yani bu elemanlara türemiş sınıf türünden referans ile de erişilebilir.
----------------------------------------------------------------------------------------------------------------------*/
Aşağıdaki demo örneği inceleyiniz.
/*----------------------------------------------------------------------------------------------------------------------
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A x = new A();
        B y = new B();
        C z = new C();

        x.foo();
        x.a = 10;
        y.foo();
        y.bar();
        ++y.a;
        y.b = 30;
        z.a = 10;
        z.b = 20;
        z.c = 45;
        z.foo();
        z.bar();
        z.tar();
    }
}

class C extends B {
    public int c;
    public  void tar()
    {
        System.out.println("C.tar");
    }
}
class B extends A {
    public int b;
    public  void bar()
    {
        System.out.println("B.bar");
    }
}

class A {
    public int a;
    public void foo()
    {
        System.out.println("A.foo");
    }
}
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
Türetme ilişkisinde nesnesel bir kapsama söz konusudur. Bu ilişkide türemiş sınıf nesnesi içerisinde taban sınıf kadarlık 
bir bölüm de bulunur. Yani türemiş sınıf nesnesi yaratıldığında nesnesel olarak kapsadığı taban sınıf nesnesi de yaratılmış 
olur. Bu anlamda bakıldığında türemiş sınıfa eklenmiş veri elemanları ile aslında taban sınıf nesnesi genişletilmiş 
(extension) olur. Bu durumda türemiş sınıf nesnesinin uzunluğu en az taban sınıf nesnesinin uzunluğu + türemiş sınıfa 
eklenen non-static veri elemanlarının uzunluğu kadardır. Aslında türemiş sınıfa eklenen non-static veri elemanları ile 
bir nesne genişletilmiş (extend) olur:
https://github.com/oguzkaran/Java-Jan-2024/blob/main/doc/media/Inheritance3.PNG
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
Burada B sınıfı türünden bir nesnenin içeriisnde a veri elemanı da vardır. Aynı şekilde C sınıfı türünden bir nesnenin 
içerisinde a ve b veri elemanları da bulunur. Bu hiyerarşiye ilişkin nesnelerin birer örneklerinin bellekteki karşılıkları 
şekilsel olarak şu şekilde ifade edilebilir:
https://github.com/oguzkaran/Java-Jan-2024/blob/main/doc/media/InheritanceMemory.PNG?raw=true 
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
Burada türemiş sınıfa eklenen veri elemanlarının düşük numaralı adreste veya yüksek numaralı adreste olmasının Java 
programcısı açısından önemi yoktur.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/

