Deyimler(Statements): Programın çalıştırılan parçalarına denir. Bir program deyimlerin çalıştırılmasıyla çalışır.
Java'da deyimler şunlardır:

  - Basit deyimler (simple statements): Bir ifadenin sonuna noktalı virgül konmasıyla oluşan deyimdir. Örneğin:
  System.out.println("Merhaba"); ya da x = y + z;
  
  - Birleşik deyimler (compund statements): { ve } arasında kalan yani bir blok içerisinde yazılan deyimlerdir. 
  Birleşik deyim çalıştırıldığında blok içerisindeki deyimler yukarıdan aşağıya çalıştırılır. Bu anlamda metodun 
  gövdesi de aslında birleşik olarak düşünülebilir.
  
  - Bildirim deyimleri (declaration statements): Bir değişkenin bildirildiği deyimdir. Bildirim deyimi çalıştırıldığında
	bellekte yer ayrılır. Örneğin:
		int a; ya da int x = 20;
  
  - Kontrol deyimleri (control statements): Akışa yön veren deyimlerdir. Her kontrol deyiminin kendine özgü çalıştırılma
	biçimi vardır. Java'da önemli bazı kontrol deyimleri şunlardır:
		- return deyimi
		- if deyimi
		- döngü deyimleri (for, while, do-while), for-each)
		- break deyimi
		- continue deyimi
		- switch deyimi/ifadesi
	
	- Boş deyim (null/empty statement): Noktalı virgülün tek başına kullanılması durumunda oluşan deyimdir. Boş deyim
	çalıştırıldığında hiç bir şey yapılmaz.	

 /*----------------------------------------------------------------------------------------------------------------------

if deyimi: Neredeyse tüm programlama dillerinde bulunan ve koşula bağlı olarak akışın yönlenmesini sağlayan bir 
kontrol deyimidir. if deyiminin genel biçimi şu şekildedir:
	
	if (<koşul ifadesi>) //if ve parantez arasında boşluk varmış
		<deyim>
	[
	else
		<deyim>
	]
	
if deyiminin koşul ifadesinin (condition expression) boolean türden olmak zorundadır. Aksi durumda error oluşur.
if deyiminde koşul ifadesinin değeri true ise if deyiminin doğru kısmına ilişkin deyim çalıştırılır, false ise
if deyiminde else kısmı varsa else kısmına ilişkin (yani yanlış kısmına ilişkin deyim) çalıştırılır. Bu anlamda 
if deyiminin else kısmı olmak zorunda değildir. if deyiminin else kısmı yoksa ve koşul ifadesinin  değeri false 
ise akış, if deyimden sonraki deyimden devam eder.

Asla if döngüsü demiyosun. if bir döngü deyimi değil

----------------------------------------------------------------------------------------------------------------------
*/
/*----------------------------------------------------------------------------------------------------------------------
Aşağıdaki demo örneği inceleyiniz
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

import java.util.List;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Bir sayı giriniz: ");
		int a = kb.nextInt();
		
		if(a % 2 == 0)
			a /= 2;
		else 
			a *= 2;
		
		System.out.printf("a = %d%n", a);
		System.out.print("Tekrar yapıyor musunuz?");
		
	}			
}

/*----------------------------------------------------------------------------------------------------------------------

Aşağıdaki demo örnekte if deyiminin doğru ve else kısmında birleşik deyim kullanılmıştır

----------------------------------------------------------------------------------------------------------------------
*/
package csd;

import java.util.List;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Bir sayı giriniz: ");
		int a = kb.nextInt();
		
		if(a % 2 == 0) {
			System.out.println("Çift sayı girdiniz");
			a /= 2;
		}
		else {
			a *= 2;
			System.out.println("Tek sayı girdiniz");
		}
		
		System.out.printf("a = %d%n", a);
		System.out.print("Tekrar yapıyor musunuz?");
		
	}			
}

/*----------------------------------------------------------------------------------------------------------------------
Anahtar notlar: if deyiminde (ve döngü deyimlerinde) basit deyimin kullanılabildiği yerde bazı programcılar yine
bileşik deyim kullanmayı tercih ederler. Diğer bir deyişle hiçbir zaman basit deyim kullanmazlar. Bazı programcılar
ise basit deyimin kullanılabildiği yerde birleşik deyim kullanmazlar. Bu yaklaşımların her ikisi de normal ve 
doğru yaklaşımlardır. Bir programcı ya da bir yazılımcı bu yaklaşımlardan herhangi birini tercih edebilir.
Ancak bu tip durumlarda kötü yaklaşım bazen birini, bazen diğerini kullanmaktır.
----------------------------------------------------------------------------------------------------------------------
*/

/*----------------------------------------------------------------------------------------------------------------------

Aşağıdaki demo örnekte if deyiminin else kısmı yoktur.
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

import java.util.List;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Bir sayı giriniz: ");
		int a = kb.nextInt();
		
		if(a % 2 == 0) 
			a /= 2;
		
		System.out.printf("a = %d%n", a);
		System.out.print("Tekrar yapıyor musunuz?");
		
	}			
}

/*----------------------------------------------------------------------------------------------------------------------
Aşağıdaki demo örnekte if deyiminde yanlışlıkla noktalı virgül konmasından dolayı ** ile belirtilen deyim if deyiminden
sonraki deyim olduğundan error oluşmaz. Burada derleyici açısından if deyiminin doğru kısmında boş değim kullanılmıştır
o da herhangi bir errora yol açmaz.
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

import java.util.List;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Bir sayı giriniz: ");
		int a = kb.nextInt();
		
		if(a % 2 == 0);
			a /= 2; //**
		
		System.out.printf("a = %d%n", a);
		System.out.print("Tekrar yapıyor musunuz?");
		
	}			
}

/*----------------------------------------------------------------------------------------------------------------------
Aşağıdaki demo örnekte else'in ait olduğu bir if deyimi olmadığından error oluşur.
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

import java.util.List;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Bir sayı giriniz: ");
		int a = kb.nextInt();
		
		if(a % 2 == 0);
			a /= 2;
		else            //error
			a *= 2;
		
		System.out.printf("a = %d%n", a);
		System.out.print("Tekrar yapıyor musunuz?");
		
	}			
}

/*----------------------------------------------------------------------------------------------------------------------
Aşağıdaki demo örnekte * ile belirtilen if deyiminin else kısmında bir if deyimi vardır.
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

import java.util.List;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Bir sayı giriniz: ");
		int a = kb.nextInt();
		
		if(a > 0) //*
			System.out.printf("Pozitif sayı girdiniz: %d%n", a);
		else           
			if(a == 0)
				System.out.println("0 girdiniz");
		else
			System.out.printf("Negatif sayı girdiniz: %d%n", a);
				
		System.out.printf("a = %d%n", a);
		System.out.print("Tekrar yapıyor musunuz?");
		
	}			
}
/*----------------------------------------------------------------------------------------------------------------------
Yukarıdaki demo örnek aşağıdaki gibi daha okunabilir yazılabilir.
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

import java.util.List;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Bir sayı giriniz: ");
		int a = kb.nextInt();
		
		if(a > 0) 
			System.out.printf("Pozitif sayı girdiniz: %d%n", a);
		else if(a == 0)
				System.out.println("0 girdiniz");
		else
			System.out.printf("Negatif sayı girdiniz: %d%n", a);
				
		System.out.printf("a = %d%n", a);
		System.out.print("Tekrar yapıyor musunuz?");
		
	}			
}

/*----------------------------------------------------------------------------------------------------------------------
Yukarıdaki örnek aşağıdaki gibi yazılsaydı, örnek senaryo gereği doğru çalışacaktı. Ancak koşullar ayrık(discrete)
olduğundan else biçiminde yazılması hem gereksiz kontrolleri engeller, hem de daha okunulabilir/algılanabilir yazılmış 
olur. Aşağıdaki kodu okuyan programcı koşulların ayrık olmadığı izlenimine kapılır. Bu durumda aslında ayrık koşullar
için else if kullanmak ayrık olmayan koşullara ilişkin if deyimlerinin okunulabilirliğini/algılanabilirliğini artırır.
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

import java.util.List;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Bir sayı giriniz: ");
		int a = kb.nextInt();
		
		if(a > 0) 
			System.out.printf("Pozitif sayı girdiniz: %d%n", a);
		if(a == 0)
				System.out.println("0 girdiniz");
		if(a < 0)
			System.out.printf("Negatif sayı girdiniz: %d%n", a);
				
		System.out.printf("a = %d%n", a);
		System.out.print("Tekrar yapıyor musunuz?");
		
	}			
}

/*----------------------------------------------------------------------------------------------------------------------
Aşağıaki demo örnekte koşullar ayrık olmadığından ayrı if deyimleri ile yazılması uygundur
----------------------------------------------------------------------------------------------------------------------
*/
package csd;
import java.util.List;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Bir sayı giriniz: ");
		int a = kb.nextInt();
		
		if(a > 6) 
			System.out.printf("%d > 6%n", a);
		if(a > 10)
			System.out.printf("%d > 6%n", a);
		if(a > 22)
			System.out.printf("%d > 6%n", a);

		System.out.print("Tekrar yapıyor musunuz?");
		
	}			
}

/*----------------------------------------------------------------------------------------------------------------------
Boolean türden ifadelerin değerlerinin koşul ifadesinde karşılaştırılmasının == veya != operatörleri ile yapılması 
tavsiye edilmez. 
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

import java.util.List;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Bir sayı giriniz: ");
		int a = kb.nextInt();
		
		Util.printValueStatus(a % 2 == 0);
		
		System.out.print("Tekrar yapıyor musunuz?");
		
	}			
}

class Util{
	public static void printValueStatus(boolean status) {
		
		if(status)     //if(status == true)
			System.out.println("Çift");
		else
			System.out.println("Tek");
	}			
}
/*----------------------------------------------------------------------------------------------------------------------
Pratikte geri dönüş değeri boolean olan metotlarla çok fazla karşılaşırız. Bu metotlar tipik olarak bir işlemin sonucuna
ilişkin doğruluğu veya yanlışlığı test etmek için kullanılır. Örneğin, bir kişinin bilgilerine göre  kişinin evli olup 
olmadığını test etmek için kulanılan bir metot tipik olarak boolean türden geri dönüş değerine sahip olacak şekilde 
yazılır. Ya da örneği bir dosyanın belirtilen yol ifadesine ilişkin yerde olup olmadığını test eden bir metot yine 
boolean türden geri dönüş değere sahip olacak şekilde yazılır. Bu tarz metotlara pratikte "predicate methods" da 
denilmektedir. Predicate bir metot eğer bir isme ilişkin ise genellikle is (bazen has, can vb) ile başlatılır. Örneğin 
bir kişinin evli olup olmadığını test eden bir metodun ismi isMarried olarak seçilebilir. Predicate bir metot bir fiile
ilişkinde bu durumda İngilizce çekim eki kullanılarak belirlenir. Örneğin yol ifadesindeki dosyanın varlığını test eden
metodun ismi exists olarak seçilebilir.
----------------------------------------------------------------------------------------------------------------------
*/

/*----------------------------------------------------------------------------------------------------------------------
Aşağıdaki isEven metodunda akış return true deyimine geldiğined zaten sonlanacağından else anahtar sözcüğünün yazılmasıyla
yazılmaması arasında bir fark yoktur. Böylesi durumlarda else yazılmaması önerilir.
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

import java.util.List;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Bir sayı giriniz: ");
		int a = kb.nextInt();
		
		if(NumberUtil.isEven(a))     
			System.out.printf("Çift sayı: %d%n", a);
		else
			System.out.printf("Tek sayı: %d%n", a);
		 
		
		System.out.print("Tekrar yapıyor musunuz?");
		
	}			
}

class NumberUtil{
	public static boolean isEven(int a) {
		
		if(a % 2 == 0)    
			return true;
		
		return false;
	}			
}
/*----------------------------------------------------------------------------------------------------------------------
Yukarıdaki örnek aşağıdaki gibi daha okunulabilir/algılanabilir olarak yazılabilir.
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

import java.util.List;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Bir sayı giriniz: ");
		int a = kb.nextInt();
		
		if(NumberUtil.isEven(a))     
			System.out.printf("Çift sayı: %d%n", a);
		else
			System.out.printf("Tek sayı: %d%n", a);
		 
		
		System.out.print("Tekrar yapıyor musunuz?");
		
	}			
}

class NumberUtil{
	public static boolean isEven(int a) {
		
		return a % 2 == 0;
	}			
}
