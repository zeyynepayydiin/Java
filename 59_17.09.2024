/*----------------------------------------------------------------------------------------------------------------------
    for-each döngü deyiminde döngü değişkenine atama implicit olarak yapıldığından aşağıdaki örnekte error oluşur
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
    Aslında for-each döngü deyimi for döngü deyimi gibi de kullanılabilir. Örneğin bir dizinin elemanlarına atama yapmak 
    için indeks numarası gerekir. Programcı bu durumda for-each döngü deyiminde indeks için değişkeni kendisi belirleyerek 
    yine kullanailir. Ancak bu durum okunabilirlik/algılanabilirlik açısından olumsuz bir durum oluşturur. Bu durumda 
    programcı klasik for döngü deyimini kullanmalıdır. Aşağıdaki örneği inceleyiniz ve durumu gözlemleyiniz. Örnekte ilk 
    döngü deyimi klasik for döngüsü olarak yazılsaydı daha okunulabilir/algılanabilir olurdu.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;
class App {
    public static void main(String[] args) {
        
     int [] a = new int[10];
     
     int i = 0;

     for(int val : a)
         a[i++] = i * 10;
     
     for(int val : a)
         System.out.printf("%d ", val);
     
     System.out.println();
    }
}
/*----------------------------------------------------------------------------------------------------------------------
   Anahtar Notlar: Bu durumda for-each döngü deyimi bir dizi için ne zaman tercih edilmemelidir? Aslında bu sorunun cevabı oldukça basittir.
   Ne zaman dizi için indeks gerekirse o zaman for-each kullanılmamalıdır. Bu durumda tersten, söylersek indeks gerekmediği
   her durumda for-each kullanılmalıdır.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
   for-each döngü deyiminde :'den sonraki ifade döngünün başında bir kez hesaplanır.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;
class App {
    public static void main(String[] args) {
        
     for(int val : Sample.getArray())
         System.out.printf("%d ", val);

     System.out.println();
    }
}

class Sample {
    public static int [] getArray()
    {
        System.out.println("getArray");
        
        return new int [] {1, 2, 3, 4, 5, 6};
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    String sınıfı "iterable" bir sınıf olmadığından for-each ile aşağıdaki gibi kullanılamaz.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;
class App {
    public static void main(String[] args) {

        String s = "ankara";
        
     for(char c : s) //error
         System.out.printf("%c ", c);

     System.out.println();
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte     
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;
class App {
    public static void main(String[] args) {

        String s = "ankara";

     for(char c : s.toCharArray()) 
         System.out.printf("%c ", c);

     System.out.println();
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Dizi Dizileri ve Matrisler
    Dizinin her bir elemanı bir dizi referansı ise bu durumda bu diziye artık bir dizi dizisi (array of array) denebilir.
    Programlamada dizi dizisi "jagged array" olarak da adlandırılmaktadır. Örneğin int [][] a bildiriminde a referansı
    her bir elemanı int [] türünden bir dizi türündendir. Yani aslında bu bir referans dizisidir. Bu durumda dizi yaratılırken
    new operatörü ile birlikte yine iki tane [] kullanılır. Aslında diziler için karmaşık bildirimler de söz konusu olabilir.
    Örneğin int [][][] bildiriminde a referansı, her bir elemanı bir dizi dizisi olan bir dizi türündendir. Pratikte
    diziler ve dizi dizileri daha çok kullanılmaktadır.
    Bir dizi dizisinin her bir elemanı olan dizi referanslarına ilişkin dizilerin uzunlukları aynı ise bu dizi dizisi
    artık bir matrisi temsil eder. Yani örneğin ana dizinin uzunluğu m, elemanı olan her bir dizinin uzunluğu n ise bu
    dizi artık m x n'lık bir matris olarak kullanılabilir.
    new operatörü ile bir dizi dizisi yaratılmasında ilk []' içerisi boş olamaz. Çünkü ilk [] ana dizinin uzunluğunu
    belirtir. Diğer []'ler boş olabilir

    Anahtar Notlar: Java'da çok boyutlu (multi dimensional) array yoktur. Yani, Java'da bir matrise için iki boyutlu dizi
    demek teknik olarak doğru deildir. Teknik olarak bir matris de bir dizi dizisidir.

    Aşağıdaki örneği inceleyiniz.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;
import org.csystem.util.array.ArrayUtil;
import java.util.Random;
import java.util.Scanner;

class App {
    public static void main(String[] args)
    {
        Scanner kb = new Scanner(System.in);
        Random r = new Random();
        System.out.println("Matrisin satır ve sütun sayılarını giriniz: ");
        int m = kb.nextInt();
        int n = kb.nextInt();

        int[][] a = new int[m][];

        for (int i = 0; i < m; ++i) {
            a[i] = new int[n];
            for (int j = 0; j < n; ++j)
                a[i][j] = r.nextInt(10);
         }
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j)
               System.out.printf("%02d ", a[i][j]);

            System.out.println();
        }
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Bir dizi dizisinin ana dizisi dışında kalan []'ler içerisinde uzunluk yazıldığında ilgili diziler otomatk olarak
    yaratılır. Bu özellik Java 5 ile dile eklenmiştir. Yukarıdaki örnek aşağıdaki gibi yapılabilir.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;
import org.csystem.util.array.ArrayUtil;
import java.util.Random;
import java.util.Scanner;

class App {
    public static void main(String[] args)
    {
        Scanner kb = new Scanner(System.in);
        Random r = new Random();
        System.out.println("Matrisin satır ve sütun sayılarını giriniz: ");
        int m = kb.nextInt();
        int n = kb.nextInt();

        int[][] a = new int[m][n];

        for (int i = 0; i < m; ++i) 
            for (int j = 0; j < n; ++j)
                a[i][j] = r.nextInt(10);

        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j)
               System.out.printf("%02d ", a[i][j]);

            System.out.println();
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte ikinci []'in için n yazmak gereksiz değil mi?
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;
import org.csystem.util.array.ArrayUtil;
import java.util.Random;
import java.util.Scanner;

class App {
    public static void main(String[] args)
    {
        Scanner kb = new Scanner(System.in);
        Random r = new Random();
        System.out.println("Matrisin satır ve sütun sayılarını giriniz: ");
        int m = kb.nextInt();
        int n = kb.nextInt();

        int[][] a = new int[m][];

        for (int i = 0; i < m; ++i)
            for (int j = 0; j < n; ++j)
                a[i] = ArrayUtil.generateRandomArray(r, n, 0, 100)

        for (int i = 0; i < a.length; ++i) {
            for (int j = 0; j < a[i].length; ++j)
               System.out.printf("%02d ", a[i][j]);

            System.out.println();
        }
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Dizi dizilerinin for-each döngü deyimi ile dolaşılması
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;
import org.csystem.util.array.ArrayUtil;
import java.util.Random;
import java.util.Scanner;

class App {
    public static void main(String[] args)
    {
        Scanner kb = new Scanner(System.in);
        Random r = new Random();
        System.out.println("Matrisin satır ve sütun sayılarını giriniz: ");
        int m = kb.nextInt();
        int n = kb.nextInt();

        int[][] a = new int[m][];

        for (int i = 0; i < m; ++i)
            for (int j = 0; j < n; ++j)
                a[i] = ArrayUtil.generateRandomArray(r, n, 0, 100);

        for (int [] array : a){
            for (int val : array)
                System.out.printf("%02d ", val);

            System.out.println();
        }
        for (int i = 0; i < a.length; ++i) {
            for (int j = 0; j < a[i].length; ++j)
               System.out.printf("%02d ", a[i][j]);

            System.out.println();
        }
    }
}





