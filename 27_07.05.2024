Derleyici, kodu çalıştırmaz, kod üretir.

/*----------------------------------------------------------------------------------------------------------------------
short, byte ve char türleri KENDİ ARALARINDA işleme sokulduklarında (türlerin her ikisi de aynı olabilir) önce 
operandlara ilişkin değerler int türüne dönüştürülür. Bu işleme "integral/integer promotion" denir. İlgili işlemin sonucu
yine int türünden çıkar.
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args) 
	{	
		short a, b, c;
		
		a = 10, b = 20;
		c = a + b; //error
		 
		
	}
}
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App{
	public static void main(String [] args) {
	
		java.util.Scanner kb = new java.util.Scanner(System.in);

		char a;
		short b;
		short c;
		
		a = 'A';
		b = 32;
		c = a + b //error; int shorta atanmaz
		
	}	
}

/*----------------------------------------------------------------------------------------------------------------------
Anahtar Notlar: Modern sistemlerde iki operandlı tamsayı işlemleri ilgili sistemdeki int ve üst tamsayı türleri ile 
yapılabilmektedir. Bu anlamda 32 bit sistemlerde tamsayılar için iki operandlı işlemler genel olarak minimum 32 bit veya
daha üstü (64 bit, 128 bit...) gibi türler ile yapılabilir. 64 bit sistemlerde tamsayılar için iki operandlı işlemler 
genel olarak minimum 32 bit veya daha üstü (64 bit, 128 bit...) gibi türler ile yapılabilir. Burada söylenenlerin oldukça
fazla detayı vardır. Bir fikir vermek amaçlı yazılmıştır.
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
Bölme işleminde  operandlardan ikisi de tamsayı türlerindense, işlemin sonucu tamsayı olarak çıkar. Bölme işleminde 
elde edilen değerin noktadan sonraki kısmı atılır. Bu kuralın bir problem olmadığını programcı için bazı algoritmalarda
kullanılabilir olduğunu anımsayınız.
Not: Sayıyı basamaklarına ayıran örneklerimizi inceleyiniz.
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

class App{
	public static void main(String [] args) {
	
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.print("İki sayı giriniz: ");
		int a = kb.nextInt();
		int b = kb.nextInt();
		double c;
		
		c = a / b ;
		
		System.out.printf("c = %.20f%n",c);
		
	}	
}

/*----------------------------------------------------------------------------------------------------------------------
Büyük tamsayı türü ile küçük tamsayı türü işleme sokulduğunda küçük tamsayı türüne ilişkin değer büyük tamsayı türüne 
dönüştürülür ve sonuç büyük tamsayı türünden çıkar. Integral promotion bu kuralın dışındadır (o çünkü kendi aralarında 
ise oluyo).
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

class App{
	public static void main(String [] args) {
	
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.print("İki sayı giriniz: ");
		
		int a = 10;
		long b = 20;
		long c;
		
		
		c = a + b ;
		
		System.out.printf("c = %d%n",c);
		
	}	
}

/*----------------------------------------------------------------------------------------------------------------------
char türü ile kendisinden uzunluk olarakbüyük olan türler işleme sokulduğunda char türüne ilişkin değer ilgili türe 
dönüştürülür ve sonuç büyük tür türünden çıkar
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

class App{
	public static void main(String [] args) {
	
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.print("İki sayı giriniz: ");
		
		char a = 'A';
		double b = 20;
		doı c;
		
		
		c = a + b ;
		
		System.out.printf("c = %d%n",c);
		
	}	
}

/*----------------------------------------------------------------------------------------------------------------------
Bir tamsayı ile bir gerçek sayı işleme sokulduğunda tamsayı türüne ilişkin değer ilgili gerçek sayı türüne dönüştürülür
ve sonuç ilgili gerçek sayı türünden çıkar
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

class App{
	public static void main(String [] args) {
	
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.print("İki sayı giriniz: ");
		
		long a = 10;
		float b = 20;
		float c;
		
		
		c = a + b ;
		
		System.out.printf("c = %f%n",c);
		
	}	
}

/*----------------------------------------------------------------------------------------------------------------------
float ve double türleri işleme sokulduğunda float türüne ilişkin değer double türüne dönüştürülür ve sonuç double tütden
çıkar
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

class App{
	public static void main(String [] args) {
	
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.print("İki sayı giriniz: ");
		
		double a = 10;
		float b = 20;
		double c;
		
		
		c = a + b ;
		
		System.out.printf("c = %f%n",c);
		
	}	
}

/*----------------------------------------------------------------------------------------------------------------------
boolean türü hiçbir tür ile işleme sokulamaz.
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

class App{
	public static void main(String [] args) {
	
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.print("İki sayı giriniz: ");
		
		boolean b = true;
		int a = 10;
		int c;
		
		
		c = a + b ; //error, boolean ile int + işlemine sokulamaz yazdı
		
		System.out.printf("c = %f%n",c);
		
	}	
}
/*----------------------------------------------------------------------------------------------------------------------
Peki, derleyici işlem öncesi otomatik tür dönüşümüne ilişkin kodları nasıl üretir? Derleyici bu işlemi geçici değişken
(temporary variable) yaratarak yapar. Yani geçici değişken yaratan kodu üretir. Aşağıdaki demo örnekte derleyici ** ile 
belirtilen işlem için yaklaşık olarak aşağıdaki kodları üretir:

long temp = a;

c = temp + b;

Anahtar Notlar: Bir işlem için yaratılan ve o işlem sonucunda yok edilen değişkenlere geçici değişken dendiğini 
anımsayınız.
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

class App{
	public static void main(String [] args) {
	
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.print("İki sayı giriniz: ");
		
		int a = 10;
		long b = 20;
		long c;
  
		c = a + b ; // **
		
		System.out.printf("c = %d%n",c);
		
	}	
}



/*----------------------------------------------------------------------------------------------------------------------
 Aşağıdaki demo örnekte derleyici ** ile belirtilen işlem için yaklaşık olarak aşağıdaki kodları üretir:

int temp1 = a;
int temp2 = b;

c = temp1 + temp2;

Anahtar Notlar: Bir işlem için yaratılan ve o işlem sonucunda yok edilen değişkenlere geçici değişken dendiğini 
anımsayınız.
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

class App{
	public static void main(String [] args) {
	
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.print("İki sayı giriniz: ");
		
		short a = 10;
		short b = 20;
		int c;
		
		c = a + b ; // **
		
		System.out.printf("c = %d%n",c);
		
	}	
}

/*----------------------------------------------------------------------------------------------------------------------
Tür Dönüştürme Operatörü (Type Casting Opertor): Bu operatör özel amaçlı, tek operandlı ve önek durumundadır.
Operatörün kullanımına ilişkin genel biçim şu şekildedir:
	(<tür ismi>)<ifde>
Operatör operandına ilişkin değeri belirtilen türe dönüştürür. Operatörün yan etkisi yoktur. Operatörün ürettiği
değer operandına ilişkin değerin, belirtilen türe dönüştürüldüğündeki elde edilen değerdir. Operatör tür değiştirme 
işlemini yine geçici değişken yaratarak yapar. Bu operatr ile yapılan dönüşümlere "explicit conversion" ya da "type 
casting" denilmektedir. Genel olarak implicit olarak yapılmayan dönüşümler, explicit olarak yapılailmektedir. Dilin 
bütünlüğü olarak implicit olarak yapılabilen dönüşümler, bu operatör kullanılarak da yapılabilmektedir. Java'da implicit 
olarak yapılamayan ancak explicit olarak yapılabilen dönüşümlerde değerlerin nasıl elde edileceği yani genel olarak 
söylemek gerekirse bilgi kaybının nasıl olacağı da belirlidir. Burada bunlar ele alınacaktır.

Anahtar Notlar: Bir dönüşüm implicit olarak yapılamıyor ancak explicit olarak yapılabiliyorsa ortada bir problem 
oluşturabilir ve derleyici bunu yanlışlıkla programcının yapmasını istemediği için explicit yapması gerekir anlamı 
çıkmalıdır. Yani aslında zorunlu olarak explicit yapılan dönüşüm için derleyiciye programcı "ben durumun farkındayım 
bana izin ver, sonuçlarına katlanacağım :)" mesajı vermektedir. Explicit olarak bile yapılamayan dönüşümler zaten anlamsız
olduklarından geçersizdir.
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

class App{
	public static void main(String [] args) {
	
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.print("İki sayı giriniz: ");
		
		int a = 10;
		long b ;
		
		b = (long)a;
	
	}	
}
/*----------------------------------------------------------------------------------------------------------------------
Aşağıdaki demo örnekte bölme işlemi double türü ile yapılacağından sonuç double türden çıkar.
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

class App{
	public static void main(String [] args) {
	
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.print("İki sayı giriniz: ");
		
		int a = kb.nextInt();
		int b = kb.nextInt(a) ;
		double c;
		
		c = (double)a / b; // burda double ile int işleme giriyo ve double türden değer çıkar
		
		System.out.printf("c = %f%n",c);
	
	}	
}
/*----------------------------------------------------------------------------------------------------------------------
Explicit conversion'a ilişkin ayrıntılar şunlardır:
----------------------------------------------------------------------------------------------------------------------
*/
/*----------------------------------------------------------------------------------------------------------------------
short türünden char türüne yapılan explicit dönüşümde sayının bit kalıbı eğişmez. Sayının yorumlanışı değişir.
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

class App{
	public static void main(String [] args) {
	
		java.util.Scanner kb = new java.util.Scanner(System.in);

		
		
		while(true) {
			System.out.print("Bir sayı giriniz: ");
			short a = Short.parseShort(kb.nextLine());
			char b;
			
			b = (char)a;
			
			System.out.printf("a = %d, b = %d%n ", a,(int)b);
			System.out.printf("a = %04X, b = %04X%n ", a, (int)b);
		
		if(a == 0)
			break;
		}
	}	
}

/*----------------------------------------------------------------------------------------------------------------------
char türünden short türüne yapılan explicit dönüşümde sayının bit kalıbı eğişmez. Sayının yorumlanışı değişir.
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

class App{
	public static void main(String [] args) {
	
		java.util.Scanner kb = new java.util.Scanner(System.in);

		char a = '\uFFE5'; //bu ne çalış
		short b;
		
		b = (short)a;
		
		System.out.printf("a = %d, a = %c, b = %d%n", (int)a, b);
		System.out.printf("a = %04X, b = %04X%n", (int)a, b);
		
		
	}	
}



