/*----------------------------------------------------------------------------------------------------------------------
    Dizilerin sıraya dizilmesi (Sorting)

    Dizilerin sıraya dizilmesine yönelik pek çok algoritma bulunmaktadır. Sıralama işleminin küçükten büyüğe ya da başka
    bir deyişle artan sırada (ascending) yapılmasına doğal sıralama (natural sort order) denir. Dizilerin azalan sırada
    sıralanmasına descending order denilmektedir. Biz burada kabarcık sıralama (bubble sort) ve seçerek sıralama
    (selection sort) algoritmalarını ele alacağız. Bu algoritmaların anlatırken doğal sıralayan biçimi, anlatımda
    kullanılacaktır ancak hem ascending hem descending biçimleri ayrıca implemente edilecektir.

    Anahtar Notlar: Algoritmaların karşılaştırılmasına yönelik iki ölçüt kullanılır: hız (speed), kaynak kullanımı
    (resource usage). Burada ele alacağımız bubble sort ve selection sort algoritmaları karşılaştırılmayacaktır.
    Algoritma analizi isimli konuda bu iki algoritmanın karşılaştırılması ayrıca ele alınacaktır.

    Kabarcık sıralama algoritmasında dizinin yan yana iki elemanı karşılaştırılır. Duruma göre yer değştirilir. Her
    yinelemede en büyük eleman daraltılmış dizinin sonuna gider böylece her yinelemede bir geriye kadar gidilmiş olur.

    Örneğin:
    22 8 66 -7 34 -6 17 21 68 45 -10 3 16
    8 22 -7 34 -6 17 21 66 45 -10 3 16 68
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util.array;

public class ArrayUtil {
    public static void bubbleSortAscending(int [] a)
    {
        for (int i = 0; i < a.length - 1; ++i)
            for (int k = 0; k < a.length - 1 - i; ++k)
                if(a[k + 1] < a[k])
                    swap(a,k,k + 1);
    }
    public static void bubbleSortDescending(int [] a)
    {
        for (int i = 0; i < a.length - 1; ++i)
            for (int k = 0; k < a.length - 1 - i; ++k)
                if(a[k] < a[k + 1])
                    swap(a,k,k + 1);
    }
    public static void bubbleSort(int [] a)
    {
        bubbleSort(a, false);
    }
    public static void bubbleSort(int [] a, boolean descending)
    {
        if(descending)
            bubbleSortDescending(a);
        else
            bubbleSortAscending(a);
    }
    public static void swap (int [] a, int i, int k)
    {
        int temp = a[i];
        a[i] = a[k];
        a[k] = temp;
    }
}
package org.csystem.util.array.test;

import java.util.Random;
import java.util.Scanner;
import static org.csystem.util.array.ArrayUtil.*;
public class ArrayUtilBubbleSortTest {
public static void run()
    {
        Random random = new Random();
        Scanner kb = new Scanner(System.in);

        while (true) {
            System.out.print("Bir sayı giriniz: ");
            int count = Integer.parseInt(kb.nextLine());

            if (count <= 0)
                break;

            int [] a = generateRandomArray(r, count, 0, 100);

            print(a, 2);
            boolean descending = random.nextBoolean();
            System.out.printf("Dizi %s olarak sıralanıyor%n", descending ? "azalan sırada" : "artan sırada");
            bubbleSort(a, descending);
            print(a, 2);
        }
    }
    public static void main(String[] args)
    {
        run();
    }
}
/*----------------------------------------------------------------------------------------------------------------------
Aşağıdaki reverse metodunu inceleyiniz. Metodun başka bir yazım biçimi ArrayUtil sınıfı içerisinde bulunmaktadır
/*----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------*/
public static void reverse(int [] a)  
{
    for (int i = 0; i < a.length / 2; ++i)  
        swap(a, i, a.length - i - 1);  
}
----------------------------------------------------------------------------------------------------------------------*/
