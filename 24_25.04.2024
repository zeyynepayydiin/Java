/*----------------------------------------------------------------------------------------------------------------------
Anahtar Notlar: switch deyiminde case bölümlerinin (dolayısıyla default bölümün) çok uzun deyimlerle doldurulmaması 
tavsiye edilir. Tipik olarak switch deyimine bakıldığında case bölümleri kolaylıkla okunabilir olmalıdır. Bu anlamda
case bölümlerinin uzun kodlar olması durumuna ilgili bölümler için metotlar yazılıp çalıştırılması tavsiye edilir. Ayrıca
çok fazla sabit değeri olması durumunda switch deyimi okunulabilirliği/algılınabilirliği olumsuz etkileyebilir. Hatta
böyle bir durumda if deyimi bile okunulabilirliği/algılınabilirliği olumsuz etkileyebilir. Bu tip durumlarda izlenebilecek 
yöntemler zamanla anlaşılacaktır.
----------------------------------------------------------------------------------------------------------------------
*/
/*----------------------------------------------------------------------------------------------------------------------
Anahtar Notlar: switch deyiminde case bölümlerinin (dolayısıyla default bölümün) çok uzun deyimlerle doldurulmaması 
tavsiye edilir. Tipik olarak switch deyimine bakıldığında case bölümleri kolaylıkla okunabilir olmalıdır. Bu anlamda
case bölümlerinin uzun kodlar olması durumuna ilgili bölümler için metotlar yazılıp çalıştırılması tavsiye edilir. Ayrıca
çok fazla sabit değeri olması durumunda switch deyimi okunulabilirliği/algılınabilirliği olumsuz etkileyebilir. Hatta
böyle bir durumda if deyimi bile okunulabilirliği/algılınabilirliği olumsuz etkileyebilir. Bu tip durumlarda izlenebilecek 
yöntemler zamanla anlaşılacaktır.
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

class App{
	public static void main(String [] args) {
	
		DemoMenuApp.run();
	}	
}

class DemoMenuApp {
	public static void printMenu()
	{
		System.out.println("1.si Ekle");
		System.out.println("2.si Sil");
		System.out.println("3.sü Güncelle");
		System.out.println("4.sü Listele");
		System.out.println("5.si Çıkış");
		System.out.println("Seçenek");
	}
	public static void insert()
	{
		System.out.println("---------------------------------");
		System.out.println("Ekle seçildi");
		System.out.println("---------------------------------");
	}
	public static void delete()
	{
		System.out.println("---------------------------------");
		System.out.println("Sil seçildi");
		System.out.println("---------------------------------");
	}public static void update()
	{
		System.out.println("---------------------------------");
		System.out.println("Güncelle seçildi");
		System.out.println("---------------------------------");
	}
	public static void list()
	{
		System.out.println("---------------------------------");
		System.out.println("Listele seçildi");
		System.out.println("---------------------------------");
		
	}

	public static void printInvalidOptionMessage()
	{
		System.out.println("---------------------------------");
		System.out.println("Geçersiz seçenek");
		System.out.println("---------------------------------");
	}
	public static void printGoodByeMessage()
	{
		System.out.println("---------------------------------");
		System.out.println("C ve sistem programcıları derneği");
		System.out.println("Teşekkürler");
		System.out.println("---------------------------------");
	}

	public static void quit()
	{
		printGoodByeMessage();
		System.exit(0);
		
	}
	public static void InvalidOption()
	{
	
		printInvalidOptionMessage();
	}
	public static void doOption(int option)
	{
		switch (option) {
		case 1:
			insert();
			break;
		case 2:
			delete();
			break;
		case 3:
			update();
			break;
		case 4:
			list();
			break;
		case 5:
			quit();
			break;
		default:
			InvalidOption();
		}
	}
	
	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		while(true){
			printMenu();
			int option  = Integer.parseInt(kb.nextLine());
			doOption(option);
		}
		
	}
}



/*----------------------------------------------------------------------------------------------------------------------
Sınıf Çalışması: Parametresi ile aldığı int türden bir yıl bilgisinin artık yıl olup olmadığını test eden isLeapYear
isimli metodu yazınız ve aşağıdaki kod ile test ediniz.
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

class App{
	public static void main(String [] args) {
	
		DateUtilIsLeapYearTest.run();
	}	
}

class DateUtilIsLeapYearTest {
	
	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		for(int y = 1994; y <= 2104; ++y)
			if(DateUtil.isLeapYear(y))
				System.out.println(y);
		
	}
}
class DateUtil {
	
	public static boolean isLeapYear(int year)
	{
		return year %4 == 0 && year % 100 != 0 || year % 400 == 0;
		
	}
}

/*----------------------------------------------------------------------------------------------------------------------
Sınıf Çalışması: Parametresi ile aldığı int türden gün ay ve yıl bilgilerine ilişkin tarihin geçerli bir tarih
olup olmadığını test eden isValidDate isimli metodu yazınız ve aşağıdaki kod ile test ediniz
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

class App{
	public static void main(String [] args) {
	
		DateUtilIsLeapYearTest.run();
	}	
}

class DateUtilIsLeapYearTest {
	
	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		while(true) {
			System.out.println("Gün ay ve yıl bilgilerini giriniz: ");
			int day = kb.nextInt();
			int month = kb.nextInt();
			int year = kb.nextInt();
			
			if(DateUtil.isValidDate(day, month, year))
				System.out.printf("%02d/%02d/%04d tarihi geçerlidir%n", day, month, year);
			else 
				System.out.println("Geçersiz tarih!... ");
			if(day == 0 && month == 0 && year == 0)
				break;
		}
		System.out.println("Tekrar yapıyor musunuz?");
	}
}
class DateUtil {
	public static boolean isValidDate(int day,int month, int year)
	{
		return 1 <= day && day <= 31 && 1 <= month && month <= 12 && day <= getDays(month, year);
	}
	public static int getDays(int month, int year)
	{
		int days = 31;
		
		switch(month)
		{
		case 4:
		case 6:
		case 9:
		case 11:
			days = 30;
			break;
		case 2:
			days = 28;
			if(isLeapYear(year))
				++days;
		}
		return days;
		
	}
	public static boolean isLeapYear(int year)
	{
		return year %4 == 0 && year % 100 != 0 || year % 400 == 0;
		
	}
}

/*----------------------------------------------------------------------------------------------------------------------
Sınıf Çalışması: Parametresi ile aldığı int türden gün ay ve yıl bilgilerine ilişkin tarihin   isimli metodu yazınız ve aşağıdaki kod ile test ediniz
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

class App{
	public static void main(String [] args) {
	
		DateUtilIsLeapYearTest.run();
	}	
}

class DateUtilIsLeapYearTest {
	
	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		while(true) {
			System.out.println("Gün ay ve yıl bilgilerini giriniz: ");
			int day = kb.nextInt();
			int month = kb.nextInt();
			int year = kb.nextInt();
			
			if(DateUtil.isValidDate(day, month, year))
				System.out.printf("%02d/%02d/%04d tarihi yılın %d. günüdür%n", day, month, year, DateUtil.getDayofYear(day, month, year));
			else 
				System.out.println("Geçersiz tarih!... ");
			if(day == 0 && month == 0 && year == 0)
				break;
		}
		System.out.println("Tekrar yapıyor musunuz?");
	}
}
class DateUtil {
	
	public static int getDayofYear(int day,int month, int year)
	{
		int dayofYear = day;
		
		switch(month-1)
		{
		case 11:
			dayofYear += 30;
		case 10:
			dayofYear += 31;
		case 9:
			dayofYear += 30;
		case 8:
			dayofYear += 31;
		case 7:
			dayofYear += 31;
		case 6:
			dayofYear += 30;
		case 5:
			dayofYear += 31;
		case 4:
			dayofYear += 30;
		case 3:
			dayofYear += 31;
		case 2:
			dayofYear += 28;
			if(isLeapYear(year))
				++dayofYear;
		case 1:
			dayofYear += 31;
		
		}
		return dayofYear;
		
	}
	public static boolean isValidDate(int day,int month, int year)
	{
		return 1 <= day && day <= 31 && 1 <= month && month <= 12 && day <= getDays(month, year);
	}
	public static int getDays(int month, int year)
	{
		int days = 31;
		
		switch(month)
		{
		case 4:
		case 6:
		case 9:
		case 11:
			days = 30;
			break;
		case 2:
			days = 28;
			if(isLeapYear(year))
				++days;
		}
		return days;
		
	}
	public static boolean isLeapYear(int year)
	{
		return year %4 == 0 && year % 100 != 0 || year % 400 == 0;
		
	}
}

