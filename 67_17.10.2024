/*----------------------------------------------------------------------------------------------------------------------
    Tüm elemanları static olarak bildirilmiş bir sınıf türünden nesne yaratılmasının bir anlamı yoktur. Çünkü bir nesne
    ilgili sınıfın non-static veri elemanları ve onları kullanan metotlar ile anlamlıdır. Tüm elemanları static olarak
    bildirilmiş bir sınıfın ctor'u bir convention olarak private yapılır. Bu conventiona JavaSE içerisindeki sınıflarda
    da uyulmuştur. Örneğin Math ve Arrays sınıflarının tüm elemanları static olarak bildirildiğinden ctor'ları private
    yapılmıştır. Tüm elemanları static olarak bildirilen bu tarz sınıflara genel olarak "utility class" da denilmektedir.
    Java programcısı yazdığı utility için bu convention'a uymalıdır.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;
import org.csystem.util.array.ArrayUtil;
import org.csystem.util.string.StringUtil;
import java.util.Arrays;

class App {
    public static void main(String[] args)
    {
       Math m = new Math(); //error
       Arrays a = new Arrays(); //error
       ArrayUtil au = new ArrayUtil(); //error
        StringUtil s; new StringUtil(); //error
    } 

}
/*----------------------------------------------------------------------------------------------------------------------
    ArrayUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util.array;

import java.util.Random;
import java.util.regex.Pattern;

public class ArrayUtil {

    private ArrayUtil()
    {

    }
    public static int [] generateRandomArray(Random random, int count, int origin, int bound)
    {
        int [] a = new int[count];

        for (int i = 0; i < count; ++i)
            a[i] = random.nextInt(origin,bound);

        return a;
    }

    public static double [] generateRandomArray(Random random, int count, double origin, double bound)
    {
        double [] a = new double[count];

        for (int i = 0; i < count; ++i)
            a[i] = random.nextDouble(origin,bound);

        return a;
    }
    public static boolean [] generateRandomArray(Random random, int count)
    {
        boolean [] a = new boolean[count];

        for (int i = 0; i < count; ++i)
            a[i] = random.nextBoolean();

        return a;
    }
    public static long sum(int [] a)
    {
        long total = 0;
        for (int val : a)
            total += val;
        return total;
    }

    public static String join(String [] s, String delimiter)
    {
       StringBuilder sb = new StringBuilder();

        for (String val : s)
           sb.append(val).append(delimiter);

        return sb.substring(0,sb.length() - delimiter.length());
    }
    public static String join(String [] s, char delimiter)
    {

        return join(s,String.valueOf(delimiter));
    }
    public static int max(int [] a)
    {
        return max(a,0);
    }
    public static int max(int [][] a)
    {
        int result = Integer.MIN_VALUE;

        for (int i = 0; i < a.length; ++i)
            for (int j = 0; j < a[i].length; ++j)
                if (a[i][j] > result)
                    result = a[i][j];
        return result;
    }
    public static int min(int [][] a)
    {
        int result = Integer.MAX_VALUE;

        for (int i = 0; i < a.length; ++i)
            for (int j = 0; j < a[i].length; ++j)
                if (a[i][j] < result)
                    result = a[i][j];
        return result;
    }
    public static int max(int [] a, int startIndex)
    {
        int max = a[startIndex];

        for (int i = startIndex + 1; i < a.length; ++i)
            max = Math.max(max, a[i]);

        return max;
    }
    public static int min(int [] a)
    {
        return min(a,0);
    }
    public static int min(int [] a, int startIndex)
    {
        int min = a[startIndex];
        for (int i = startIndex + 1; i < a.length; ++i)
            min = Math.min(min,a[i]);
        return min;
    }
    public static int partition(int [] a, int threshold)
    {
        int partitionPoint = 0;

        while (partitionPoint != a.length && a[partitionPoint] < threshold)
            ++partitionPoint;

        if (partitionPoint == a.length)
            return partitionPoint;

        for (int i = partitionPoint + 1; i < a.length; ++i)
            if(a[i] < threshold)
                swap(a,i,partitionPoint++);

        return partitionPoint;
    }
    public static int partitionByEven(int [] a)
    {
        int partitionPoint = 0;

        while (partitionPoint != a.length && a[partitionPoint] % 2 == 0)
            ++partitionPoint;

        if (partitionPoint == a.length)
            return partitionPoint;

        for (int i = partitionPoint + 1; i < a.length; ++i)
            if(a[i] % 2 == 0)
                swap(a,i,partitionPoint++);

        return partitionPoint;
    }

    public static void print(int [] a)
    {
        print(a, ' ', '\n');
    }


    public static void print(int [] a, char sep, char end)
    {
        print(a,1,sep,end);
    }

    public static void print(int [] a, int n)
    {
        print(a, n,' ', '\n');
    }


    public static void print(int [] a, int n, char sep, char end)
    {
        String fmt = String.format("%%0%dd%c",n, sep);

        for (int val : a)
            System.out.printf(fmt, val, sep);

        System.out.print(end);
    }

    public static void print(int [][] a, int n)
    {
        for (int [] array : a)
            print(array, n, ' ', '\n');
    }
    public static void print(int [][] a)
    {
        for (int [] array : a)
            print(array, 1, ' ', '\n');
    }


    public static void print(double [] a)
    {
        print(a, ' ', '\n');
    }
    public static void print(double [] a, char sep, char end)
    {
        for (double val : a)
            System.out.printf("%f%c", val, sep);

        System.out.print(end);
    }
    private static void bubbleSortAscending(int [] a)
    {
        for (int i = 0; i < a.length - 1; ++i)
            for (int k = 0; k < a.length - 1 - i; ++k)
                if(a[k + 1] < a[k])
                    swap(a,k,k + 1);
    }
    private static void bubbleSortDescending(int [] a)
    {
        for (int i = 0; i < a.length - 1; ++i)
            for (int k = 0; k < a.length - 1 - i; ++k)
                if(a[k] < a[k + 1])
                    swap(a,k,k + 1);
    }
    public static void bubbleSort(int [] a)
    {
        bubbleSort(a, false);
    }
    public static void bubbleSort(int [] a, boolean descending)
    {
        if (descending)
            bubbleSortDescending(a);
        else
            bubbleSortAscending(a);
    }
    public static void swap (int [] a, int i, int k)
    {
        int temp = a[i];
        a[i] = a[k];
        a[k] = temp;
    }

    private static void selectionSortAscending(int [] a)
    {
        int min, minIndex;

        for (int i = 0; i < a.length - 1; ++i){
            min = a[i];
            minIndex = i;

            for (int k = i + 1; k < a.length; ++k)
                if (a[k] < min){
                    min = a[k];
                    minIndex = k;
                }
            a[minIndex] = a[i];
            a[i] = min;
        }
    }
    private static void selectionSortDescending(int [] a)
    {
        int max, maxIndex;

        for (int i = 0; i < a.length - 1; ++i){
            max = a[i];
            maxIndex = i;

            for (int k = i + 1; k < a.length; ++k)
                if (a[k] > max) {
                    max = a[k];
                    maxIndex = k;
                }
            a[maxIndex] = a[i];
            a[i] = max;

        }
    }
    public static void selectionSort(int [] a)
    {
        selectionSort(a,false);
    }
    public static void selectionSort(int [] a, boolean descending)
    {
        if(descending)
            selectionSortDescending(a);
        else
            selectionSortAscending(a);

    }
    public static int [] getHistogramData(int [] a, int n)
    {
        int [] data = new int[n + 1];

        for (int val : a)
            ++data[val];

        return data;
    }

}

/*----------------------------------------------------------------------------------------------------------------------
    Nesne yönelimli tasarım ilkeleri:

    NYPT için birtakım ilkeler söz konusudur. Bu ilkelere literatürde "Object Oriented Design Principles" de denilmektedir.
    Aslında bu ilkeler yalnızca NYPT'ye özgü değildir. NYPT için de uygulanabilir. Bu ilkeler kısaca "SOLID" olarak bilinir.
    Bu ilkeler şunlardır:
        - Single Responsibility Principle (SRP)
        - Open Closed Principle (OCP)
        - Liskov substitution Principle (LSP)
        - Interface Segregation Principle (ISP)
        - Dependency Invertion Principle (DIP)
    Bu ilkeler birbirinden ayrı olarak düşünülmemelidir. 

    Bu ilkelere ilişkin detaylar bu kurs ve uygulama kursları ile birlikte konular içerisinde anlaşılacaktır.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
    Single Responsibility Principle:
    Bu ilkeye göre bir sınıfın tek bir sorumluluğu olmalıdır. Bu anlamda bir sınıf birbirinden bağımsız işler yapacak
    şekilde tasarlanmamalıdır. Bu ilkeye ilişkin iki temel mottosu şu şekilde söylenir:
    - A module should be responsible to one, and only one, actor
    - A class should have only one reason to change
    
    İkinci motto NYPT açısından daha belirgindir.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
    Tasarım kalıpları:
    Özellikle NYPT ilerledikçe bazı programcılar bir takım problemlere genel çözümler üretme çabasına girmişlerdir. Bu
    anlamda "Gang of Four (GoF)" olarak anılan 4 bilim insanı bir grup genel problemi çözümleriyle birlikte kategorize 
    etmilerdir. Bu tip genel çözümlere "tasarım kalıpları (design patterns) denilmektedir. GoF pattern'lerinden sonra 
    da pek çok pattern tasarlanmıştır. Bu kurs ve uygulama kurslarında da çeşitli pattern'ler konular içerisinde ele 
    alınacaktır.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
    Singleton Tasarım Kalıbı:
    Singleton GoF'un nesne yaratan (creational) kalıplarından biridir. Problemin tanımı şu şekilde verilebilir:
    Öyle bir sınıf olsun ki o sınıf türünden program boyunca yalnızca bir tane nesne yaratılabilsin ve istenildiği zaman
    o nesnenin referansı elde edilebilsin.

    Anahtar Notlar: Singleton kalıbının birçok implementasyonu söz konusudur. Zaman içerisinde bunlar ele alınacaktır.

    Anahtar Notlar: Burada Singleton kalıbının hangi durumlarda kullanılacağı ele alınmayacaktır. Yalnızca probleme ve
    çözümüne odaklanınız.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
    Singleton kalıbının bir implementasyınu. Dikkat edilirse bu implementasyonda ilgili nesne ilk getInstance çağrısında
    yaratılmaktadır. Bu durumda getInstance çağrılmadığı sürece nesne yarartılmamaktadır. Bu sebeple buna "lazy
    implementation" da denilmektedir.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
       Singleton s1 = Singleton.getInstance();
       Singleton s2 = Singleton.getInstance();

       System.out.println(s1 == s2);
    }

}
class Singleton {
    private static Singleton ms_instance;
    private int m_x;

    public static Singleton getInstance()
    {
        if (ms_instance == null)
            ms_instance = new Singleton();

        return ms_instance;   // obje yaratılmadıysa yani referans null değer tutuyorsa objeyi yaratıyor ama daha önce yaratıldıysa o referansı gönderiyor
    }

    public int getX() {
        return m_x;
    }

    public void setX(int x) {
        m_x = x;
    }

    public String toString()
    {
        return String.valueOf(m_x);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Point sınıfını kutupsal koordinatlar (polar coordinates) da kullanılarak nesne yaratılabilecek şekilde güncellemek
    isteyelim. Bu durumda Point sınıfına kutupsal koordinata ilişkin yarıçapı ve açı bilgisini alan bir ctor ile
    birlikte kartezyen koordinatları alan bir ctor Point sınıfı içerisinde aynı imzaya sahip olduklarından yazılamazlar.
    Bu durumda Point sınıfına aşağıdaki gibi 3 parametreli bir ctor eklenen bir yaklaşıma gidilebilir:
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.math.geometry;  
  
import static java.lang.Math.*;  
  
public class Point {  
    public double x;  
    public double y;  
  
    public Point()  
    {       
    }  
  
    public Point(double a)  
    {  
       x = a;      
    }  
      
    public Point(double a, double b)  
    {  
       x = a;  
       y = b;  
    }  
  
    public Point(double a, double b, boolean polar)  
    {  
       x = polar ? a * cos(b) : a;  
       y = polar ? a * sin(b) : b;  
    }  
      
    public double distance()  
    {  
       return distance(0, 0);  
    }  
      
    public double distance(Point other)  
    {  
       return distance(other.x, other.y);  
    }  
      
    public double distance(double a, double b)  
    {  
       return sqrt(pow(x - a, 2) + pow(y - b, 2));  
    }    
      
    public void offset(double dxy)  
    {  
       offset(dxy, dxy);  
    }  
      
    public void offset(double dx, double dy)  
    {  
       x += dx;  
       y += dy;  
    }  
      
    public String toString()  
    {  
       return "(%f, %f)".formatted(x, y);  
    }  
}
/*----------------------------------------------------------------------------------------------------------------------
    Bu sınıfın basit bir kullanımı şu şekildedir:
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;  
  
import org.csystem.math.geometry.Point;  
  
class App {  
    public static void main(String[] args)  
    {  
        Point pc = new Point(100, 100);  
        Point pp = new Point(100, 100, true);
  
        System.out.println(pc.toString());  
        System.out.println(pp.toString());  
    }  
}
/*----------------------------------------------------------------------------------------------------------------------
    Yeni eklenen ctor ile birlikte isteniken sağlanmaktadır ancak kullanım biraz karmaşıklaşmaya başlamış ve
    okunulaabilirlik/ algılanabilirlik görece azalmıştır. Karmaşıklığı azaltmak ve okunulaabilirliği/ algılanabilirliği
    artırmak için şöyle bir yaklaşım uygulanabilir. Sınıfın ctor'u private yapılır ve createCartesian ve createPolar
    isimli factory metotlar eklenebilir. Şüphesiz farklı yaklaşımlar da söz konusu olabilir. Point sınıfının bu yaklaşımla
    olan implementasyonu ve basit kullanım kodları şu şekildedir: 
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.math.geometry;  
  
import static java.lang.Math.*;  
  
public class Point {  
    private double m_x;  
    private double m_y;  
  
    private Point(double a, double b, boolean polar)  
    {  
       m_x = polar ? a * cos(b) : a;  
       m_y = polar ? a * sin(b) : b;  
    }  
  
    public static Point createCartesian(double x, double y)  
    {  
       return new Point(x, y, false);  
    }  
  
    public static Point createPolar(double r, double theta)  
    {  
       return new Point(r, theta, true);  
    }  
  
    public double getX()  
    {  
       return m_x;  
    }  
  
    public void setX(double x)  
    {  
       m_x = x;  
    }  
  
    public double getY()  
    {  
       return m_y;  
    }  
  
    public void setY(double y)  
    {  
       m_y = y;  
    }  
  
    public double distance()  
    {  
       return distance(0, 0);  
    }  
      
    public double distance(Point other)  
    {  
       return distance(other.m_x, other.m_y);  
    }  
      
    public double distance(double x, double y)  
    {  
       return sqrt(pow(m_x - x, 2) + pow(m_y - y, 2));  
    }    
      
    public void offset(double dxy)  
    {  
       offset(dxy, dxy);  
    }  
      
    public void offset(double dx, double dy)  
    {  
       m_x += dx;  
       m_y += dy;  
    }  
      
    public String toString()  
    {  
       return "(%f, %f)".formatted(m_x, m_y);  
    }  
}
/*----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;  
  
import org.csystem.math.geometry.Point;  
  
class App {  
    public static void main(String[] args)  
    {  
        Point pc = Point.createCartesian(100, 100);  
        Point pp = Point.createPolar(100, 100);  
  
        System.out.println(pc.toString());  
        System.out.println(pp.toString());  
    }  
}
/*----------------------------------------------------------------------------------------------------------------------
    Point sınıfı aşağıdaki gibi de yazılabilirdi değil mi?
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.math.geometry;  
  
import static java.lang.Math.*;  
  
public class Point {  
    private double m_x;  
    private double m_y;  
  
    private static Point create(double a, double b)  
    {  
       Point p = new Point();  
  
       p.m_x = a;  
       p.m_y = b;  
  
       return p;  
    }  
  
    private Point()  
    {  
    }  
  
    public static Point createCartesian(double x, double y)  
    {  
       return create(x, y);  
    }  
  
    public static Point createPolar(double r, double theta)  
    {  
       return create(r * cos(theta), r * sin(theta));  
    }  
  
    public double getX()  
    {  
       return m_x;  
    }  
  
    public void setX(double x)  
    {  
       m_x = x;  
    }  
  
    public double getY()  
    {  
       return m_y;  
    }  
  
    public void setY(double y)  
    {  
       m_y = y;  
    }  
  
    public double distance()  
    {  
       return distance(0, 0);  
    }  
      
    public double distance(Point other)  
    {  
       return distance(other.m_x, other.m_y);  
    }  
      
    public double distance(double x, double y)  
    {  
       return sqrt(pow(m_x - x, 2) + pow(m_y - y, 2));  
    }    
      
    public void offset(double dxy)  
    {  
       offset(dxy, dxy);  
    }  
      
    public void offset(double dx, double dy)  
    {  
       m_x += dx;  
       m_y += dy;  
    }  
      
    public String toString()  
    {  
       return "(%f, %f)".formatted(m_x, m_y);  
    }  
}
