/*----------------------------------------------------------------------------------------------------------------------
 Sınıf Çalışması: Parametresiyle aldığı int türden n değeri için n-inci asal sayıyı döndüren nthPrime metodunu
 NumberUtil sınıfı içerisinde yazınız ve aşağıdaki kod ile test ediniz.
 

----------------------------------------------------------------------------------------------------------------------
*/
package csd;

class App{
	public static void main(String [] args) {
		
		NumberUtilNthPrimeTest.run();
		
	}	
}

class NumberUtilNthPrimeTest{
	public static void run() {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		while(true) {
			
			System.out.print("Bir sayı giriniz: ");
			int n = Integer.parseInt(kb.nextLine());
			
			if(n <= 0)
				return;
		System.out.printf("%d. asal sayı: %d%n ", n, NumberUtil.nthPrime(n));
		}
		
	}
	
}
class NumberUtil {
	
	public static long nthPrime(int n) {
		
		long result = 2;
		int count = 0;
		for(long i = 2; count < n; ++i)
			if(isPrime(i)) {
				++count;
				result = i; 
			}
		return result;
	}
	
	
	public static boolean isPrime(long a)
	{
		if (a <= 1)
			return false;		
		
		if (a % 2 == 0)
			return a == 2;
		
		if (a % 3 == 0)
			return a == 3;
		
		if (a % 5 == 0)
			return a == 5;
		
		if (a % 7 == 0)
			return a == 7;
		
		int count = 0;
				
		for (long i = 11; i * i <= a; i += 2) {
			++count;
			if (a % i == 0)
				return false;
		}
		
		System.out.printf("isPrime -> count:%d%n", count);
		
		return true;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
 Sınıf Çalışması: Parametresiyle aldığı int türden bir sayıdan büyük ilk asal sayıyı döndüren nextClosestPrime metodunu
 NumberUtil sınıfı içerisinde yazınız ve aşağıdaki kod ile test ediniz.
 
 Açıklamalar:
 
 -

----------------------------------------------------------------------------------------------------------------------
*/
package csd;

class App{
	public static void main(String [] args) {
		
		NumberUtilNextCLosestPrimeTest.run();
		
	}	
}

class NumberUtilNextCLosestPrimeTest{
	public static void run() {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		while(true) {
			
			System.out.print("Bir sayı giriniz: ");
			long a = Integer.parseInt(kb.nextLine());
			
			System.out.printf("%d sayısından büyük ilk asal sayı: %d%n ", a, NumberUtil.nextCLosestPrime(a));

			if(a == 0)
				return;
		}
		
	}
	
}
class NumberUtil {
	
	public static long nextCLosestPrime(long a) {
		
		if (a < 2)
			return 2;
		
		while(!isPrime(++a));		
			
		return a;	
	}
	
	
	public static boolean isPrime(long a)
	{
		if (a <= 1)
			return false;		
		
		if (a % 2 == 0)
			return a == 2;
		
		if (a % 3 == 0)
			return a == 3;
		
		if (a % 5 == 0)
			return a == 5;
		
		if (a % 7 == 0)
			return a == 7;
		
		int count = 0;
				
		for (long i = 11; i * i <= a; i += 2) {
			++count;
			if (a % i == 0)
				return false;
		}
		
		//System.out.printf("isPrime -> count:%d%n", count);
		
		return true;
	}
}
/*----------------------------------------------------------------------------------------------------------------------
Bir döngünün değimi başka bir döngü deyimi ise bu durumda iç içe döngü yazılmış olur. İç içe döngüler tipik olarak
iç içe iki döngü, iç içe 3 döngü biçiminde karşımıza çıkar. İç içe 3'ten fazla döngü çok özeldurumlar dışında karşımıza 
çıkmaz. Bazı durumlarda programcı döngü içerisinde çağırdığı bir metot da döngüye girdiğinden dolayı olarak iç içe yazmış
olur.
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz: ");
		int m = kb.nextInt();
		int n = kb.nextInt();
		
		for(int i = 0; i < m; ++i)
			for(int k = n - 1; k >= 0; --k)
				System.out.printf("(%d,%d)%n", i, k);
	}	
}

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz: ");
		int m = kb.nextInt();
		int n = kb.nextInt();
		
		for(int i = 0; i < m; ++i)
			Sample.doWork(i, n);
	}	
}


class Sample{
	public static void doWork(int i, int n) {
		
		for(int k = n - 1; k >= 0; --k)
			System.out.printf("(%d,%d)%n", i, k);
	}	
}



