/*----------------------------------------------------------------------------------------------------------------------
    Bir enum sınıfına sabitler dışında da eleman eklenebilmektedir.(eleman deninve aklımıza veri elemanı, metot veya constructor gelir)
    Bir enum sınıfına eleman eklemek için son sabitten sonra noktalı virgül konmalıdır. Bir enum sınıfına klasik sınıflarda 
    olduğu gibi veri elemanı, ctor ve metot eklenebilir. Bir enum sınıfına programcı tarafından hiç ctor eklenmemişse, 
    default ctor derleyici tarafından otomatik olarak içi boş olarak yazılır. Ancak burada klasik sınıflarda olduğu gibi 
    public yazılmaz. Zaten bir enum sınıfına programcı tarafından public ya da protected bir ctor yazılması geçersizdir. 
    Bir enum sınıfına programcı ya private olarak ya da no-modifier olarak istediği kadar ctor ekleyebilir. Bir enum 
    sınıfında ctor'un no-modifier olması private olarak bildirilmesiyle aynı anlamdadır. Genel olarak programcılar bir
    enum sınıfına yazdıkları ctor'u no-modifier olarak bildirirler. Bu durum yalnızca ctor için geçerlidir. Bir enum 
    sınıfına eklenen diğer elemanlar için erişim belirleyiciler klasik sınıflar ile aynıdır. Aslında bir enum sınıfı 
    için ctor, erişim anlamında private'ın da ötesindedir. Bir enum türünden nesne hiç bir yerde programcı tarafından
    yaratılamaz. Yani bir enum türünden nesne sayısı o enum türüne ait enum sabiti sayısı kadardır.

    Bir enum sınıfında sabiti doğrudan bildirmek veya sabit isminden sonra içi boş parantez koymak aynı anlamdadır ve bu
    sabite ilişkin referansın gösterdiği nesnenin default ctor çağrılarak yaratılacağı anlamına gelir.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki demo örneği inceleyiniz. Örnekte static elemanların yaratıldığını da gözlemleyiniz.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Random;

class App {

    public static void main(String[] args)
    {
        Color color1 = Color.randomColor(new Random());
        System.out.println("---------------------------");
        Color color2 = Color.randomColor(new Random()); //color2 yaratıldığında ctorlar 2. defa çağrılmıyorlar

        System.out.println(color1.toString());
        System.out.println(color2.toString());
    }
}
enum Color {
   RED(), GREEN(), BLUE(), WHITE, BLACK;
   private static final Color []  VALUES = values();

   Color()
   {
       System.out.println("I am default ctor");
   }

    public static Color randomColor(Random random)
    {
        return VALUES[random.nextInt(VALUES.length)];
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Bir sınıfın static veri elemanları, sınıfın bir elemanı ilk kez kullanıldığında yaratılır. Her nesne yaratılıp 
    kullanıldığında static veri elemanları tekrar tekrar yaratılmaz çünkü static elemanlar class'a aittir nesneye değil
----------------------------------------------------------------------------------------------------------------------*/

