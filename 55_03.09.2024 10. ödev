/*----------------------------------------------------------------------------------------------------------------------
    Seçerek sıralama algoritmasında en küçük eleman bulunur, ilk eleman ile değiştirilir. Dizi bir daraltılır, aynı işlem
    daraltılmış dizi için yapılır. Böylece ilerlenir.
    Örneğin:
        22 8 66 -7 34 -6 17 21 68 45 -10 3 16
        -10 8 66 -7 34 -6 17 21 68 45 22 3 16
        -10 -7 66 8 34 -6 17 21 68 45 22 3 16
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util.array.test;

import java.util.Random;
import java.util.Scanner;

import static org.csystem.util.array.ArrayUtil.*;

public class ArrayUtilSelectionSortTest {
    public static void run()
    {
        Random random = new Random();
        Scanner kb = new Scanner(System.in);

        while (true) {
            System.out.print("Bir sayı giriniz: ");
            int count = Integer.parseInt(kb.nextLine());

            if (count <= 0)
                break;

            int [] a = generateRandomArray(random, count, 0, 100);

            print(a, 2);
            boolean descending = random.nextBoolean();
            System.out.printf("Dizi %s olarak sıralanıyor%n", descending ? "azalan sırada" : "artan sırada");
            selectionSort(a,descending);
            print(a, 2);
        }
    }
    public static void main(String[] args)
    {
        run();
    }

}
/*----------------------------------------------------------------------------------------------------------------------
    Bölümleme (Partition) Algoritması: Bu algoritmada amaç, bir dizinin belirli bir koşula uyan elemanlarının dizinin
    başında, koşuula uymayanların ise dizinin sonuna getirilmesidir. Bu algoritma başka bir dizi yaratılmadan da
    gerçekleştirilebilir (implementation). Zaten başka bir dizi kullanımı efektif değildir. Dizi bölümlendikten sonra
    ilk koşula uymayan elemanın bulunduğu indeks değerine "bölümleme noktası (partition point)" denir. Bu durumda dizinin
    tüm elemanları ilgili koşula uyuyor ise partition point'in değeri dizinin uzunluğudur, dizinin hiçbir elemanı koşula
    uymuyorsa partition point'in değeri sıfırdır. Bu işlem tipik olarak şu şekilde yapılabilir: Önce dizinin koşula uymayan
    ilk elemanı bulunur. Sonra ikinci bir indeks, koşula uymayan ilk elemandan bir sonraki elemana konumlandırılır. Eğer
    eleman (ikinci indeksteki eleman) koşula uyuyorsa koşula uymayan eleman ile (birinci indeksteki eleman) yer değiştirilir ve
    birinci indeks artırılır. İkinci indeks her durumda artırılır. Böylece ilerlenir. Bu durumda birinci indeks partition
    point olara elde edilmiş olur.
    Örneğin:
        2 8 66 7 34 6 17 21 68 45 10 3 16
        dizisinde 11 değerinden küçük olan elemanların bölümlenmesi şu şekilde elde edilebilir.
        1. indeks: 2
        2. indeks: 3

        2 8 7 66 34 6 17 21 68 45 10 3 16
        1. indeks: 3
        2. indeks: 4

        2 8 7 66 34 6 17 21 68 45 10 3 16
        1. indeks: 3
        2. indeks: 5

        2 8 7 6 34 66 17 21 68 45 10 3 16
        1. indeks: 4
        2. indeks: 6
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util.array.test;

import java.util.Random;
import java.util.Scanner;

import static org.csystem.util.array.ArrayUtil.*;

public class ArrayUtilPartitionTest {
    public static void run()
    {
        Random random = new Random();
        Scanner kb = new Scanner(System.in);

        while (true) {
            System.out.print("Input count: ");
            int count = Integer.parseInt(kb.nextLine());

            if (count <= 0)
                break;

            int [] a = generateRandomArray(random, count, 0, 100);

            print(a, 2);
            System.out.print("Input threshold");
            int threshold = Integer.parseInt(kb.nextLine());

            System.out.printf("Threshold: %d%n", threshold);
            int partitionPoint = partition(a,threshold);

            print(a);
            System.out.printf("Partition Point: %d%n",partitionPoint);
        }
    }
    public static void main(String[] args)
    {
        run();
    }

}
/*----------------------------------------------------------------------------------------------------------------------
    Parametresi ile aldığı long türden bir sayının basamaklarından oluşan diziye geri dönen getDigits isimli metodu
    NumberUtil sınıfı içerisinde yazınız ve aşağıdaki kod ile test ediniz.
    Açıklama:
    Metot negatif bir argüman için basamak değerlerini pozitif olarak verecektir.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util.numeric.test;

import java.util.Random;
import java.util.Scanner;

import static org.csystem.util.array.ArrayUtil.print;
import static org.csystem.util.numeric.NumberUtil.getDigits;

public class NumberUtilGetDigitsTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);
        Random random = new Random();

        System.out.println("Bir sayı giriniz: ");
        int n = kb.nextInt();

        for (int i = 0; i < n; ++i) {
            long val = random.nextLong();
            System.out.printf("%d -> ", val);
            print(getDigits(val));
        }
    }

    public static void main(String[] args) {
        run();
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Aşağıda prototipi verilen metodu açıklamalara göre yazınız:
    public static in [] getHistogramData(int [] a, int n);

    Açıklamalar:
        - Metodun birinci parametresi içerisinde [0,n] aralığında değerlerden oluşan bir dizi olacaktır.
        - Parametre ile alınan dizinin değerleri için geçerlilik kontrolü yapılmayacaktır.
        - Metot, parametresi ile aldığı dizinin içerisinde [0,n] aralığındaki sayıların sıklık sayısını yani hangi sayıdan
        kaç tane olduğu bilgisine ilişkin diziye geri dönecektir.
        - Geri dönüş değeri olan dizinin indeks numarası [0,n] aralığındaki ilgili sayıya karşılık gelecektir. Yani
        örneğin 25 numaralı indeksteki eleman, 25 sayısının kaç tane olduğu bilgisini tutacaktır.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util.array.test;

import java.util.Random;
import java.util.Scanner;
import static org.csystem.util.array.ArrayUtil.*;

public class ArrayGetHistogramDataTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);
        Random random = new Random();

        while (true) {
            System.out.print("Bir sayı giriniz: ");
            int count = Integer.parseInt(kb.nextLine());

            if (count <= 0)
                break;

            System.out.print("Bound giriniz: ");
            int bound = Integer.parseInt(kb.nextLine());

            int [] a = generateRandomArray(random, count, 0,bound);

            print(a,2);
            print(getHistogramData(a,bound),2);

        }
    }

    public static void main(String[] args) {
        run();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
GOOGLE SORULARINI ÇÖZ!!!
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
Char türden diziler String sınıfına benzetilebilir. char türden diziler immutable değildir. Bu anlamda char 
türden diziler String sınıfına yardımcı olarak da kullanılabilir. Örneğin String sınıfının immutable olmasından dolayı
oluşabilecek maliyetli bir durumda cahr türden dizikullanılabilir. Şüphesiz böyle bir durumda StringBuilder sınıfı da 
String sınıfına yardımcı olarak tercih edilebilir. Zaten StringBuilder sınıfı da genellikle içsel olarak char türden
dizi kullanmaktadır. String sınıfının toCharArray metodu ile yazıya ilişkin karakterlerden oluşan char türden dizi elde
edilebilir. Şüphesiz toCharArray metodu ile her çağrıda yeni bir dizi yaratır. Şüphesiz toCharArray metodu ile her çağrıda
yeni bir dizi yaratılır. String sınfının char [] parametreli ctor'ları ile char türden dizi içrisindeki karakterleri 
tutan String nesnesi elde edilebilir. String sınıfının char [] parametresi alan 3 parametreli ctor'u dizinin herhangi 
bir indeksinden başlayarak 3. parametresi ile aldığı sayı kadar karakterden oluşan bir String nesnesi yaratılmasını  
sağlar. String sınıfının char [] parametreli valueOfFactory metotları da yine char türden bir diziden String nesnesi
elde etmek için kullanılabilir. Aşağıdaki demo örneği inceleyiniz.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Aşağıda prototipi verilen metodu açıklamalara göre yazınız:
    public static int [] getHistogramData(int [] a, int n);

    Açıklamalar:
        - Metodun birinci parametresi içerisinde [0,n] aralığında değerlerden oluşan bir dizi olacaktır.
        - Parametre ile alınan dizinin değerleri için geçerlilik kontrolü yapılmayacaktır.
        - Metot parametresi ile aldığı dizinin içerisinde [0,n] aralığındaki sayıların sıklık sayısını yani hangi sayıdan
        kaç tane olduğu bilgisine ilişkin diziye geri dönecektir.
        - Geri dönüş değeri olan dizinin indeks numarası [0,n] aralığındaki ilgili sayıya karşılık gelecektir. Yani
        örneğin 25 numaralı indeksteki eleman, 25 sayısının kaç tane olduğu bilgisini tutacaktır.
----------------------------------------------------------------------------------------------------------------------*/

package org.csystem.app;

import java.util.Scanner;

import static org.csystem.util.array.ArrayUtil.print;

class App {
    public static void main(String [] args)
    {
        Scanner kb = new Scanner(System.in);

        while (true) {
            System.out.print("Input a text: ");
            String s = kb.nextLine();

            if ("quit".equals(s))
                break;

            char [] chars = s.toCharArray();

            for (int i = 0; i < chars.length / 2; ++i) {
                char temp = chars[i];

                chars[i] = chars[chars.length - 1 - i];
                chars[chars.length - 1 - i] = temp;

            }

            System.out.printf("Reverse of text: %s%n",new String(chars));
            System.out.printf("Reverse of text: %s%n",String.valueOf(chars));
        }
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: StringUtil sınıfı içerisinde daha önceden yazılmış olan changeCase metodunu char türden dizi
    kullanarak char türden dizi kullanarak Util isimli bir sınıf içerisinde yazınız.  Util sınıfını, test kodlarını ve
    entry point'i içeren sınıfı tek bir derleme biriminde yazabilirsiniz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.string.StringUtil;
import java.util.Scanner;
import static org.csystem.util.array.ArrayUtil.print;

class App {
    public static void main(String[] args) {

        ChangeCaseTest.run();
    }
}
class ChangeCaseTest{
    public static void run()
    {
        java.util.Scanner kb = new java.util.Scanner(System.in);

        while (true) {
            System.out.print("Input string:");
            String s = kb.nextLine();

            System.out.printf("%s%n", StringUtil.changeCase(s));

            if ("exit".equals(s))
                break;
        }
    }
}
class Util {
    public static String changeCase(String s)
    {
        char [] c = s.toCharArray();

        for (int i = 0; i < s.length(); ++i)
            c[i] = Character.isUpperCase(c[i]) ? Character.toLowerCase(c[i]) : Character.toUpperCase(c[i]);

        return String.valueOf(c); // burada valueOf ile char'ı stringe çeviriyoruz
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Referans Dizileri: Her bir elemanı bir referans olan dizilere denir. Bu durumda dizinin her bir elemanı ilgili türden
    bir adres tutar. Bu durumda bir referans dizisinin yaratılması, elemanı olan her bir referansın gösterdiği nesnelerin
    de yaratılması anlamına gelmez. Yani bir referans dizisi yaratıldıktan sonra diziye ilişkin referanlsara da uygun
    adreslerin verilmesi gerekir. Bir referans dizisi ilk değer vermeden yaratıldığında her bir referansa null değeri
    atanır.

    Anahtar Notlar: Programlamada kullanılmayan adrese 'null adres (null address) denilmektedir. Java'da null adres null
    isimli bir sabit ile temsil edilir. null bir referansın default değeri olarak atanır. null adres detayları ileride
    ele alınacaktır.

    Aşağıdaki örnekte referans dizisi yaratılmış, ancak dizinin elemanı olan referanslar herhangi bir nesneyi
    göstermediğinden exception oluşur.
----------------------------------------------------------------------------------------------------------------------*/

package org.csystem.app;

class App {
    public static void main(String[] args) {

        Sample [] samples;

        samples = new Sample[10]; //samples'ın türü Sample türünden bir dizi samples[i]'nin türü Sample

        System.out.println("Dizi elemanları yaazdırılıyor: ");

        for (int i = 0; i < 10; ++i)
            samples[i].x = i; //samples[i] referansının gösterdiği nesnenin veri elemanına erişmeye çalışıyoruz.

        for (int i = 0; i < 10; ++i)
            System.out.printf("%d ", samples[i].x);

        System.out.println();
    }
}

class Sample {
    public int x;
    public Sample(int a) {
        x = a;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Yukarıdaki örnek aşağıdaki gibi her bir referansa yeni yaratılmış bir nesnenin adresi verilerek yapılabilir. Şüphesiz
    duruma göre (yani domain'e göre) referanslara verilecek adresler daha önceden yaratılmış nesnelerin adresleri de 
    olabilir. Çözüm durumu anlatmak için yapılmıştır.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args) {

        Sample [] samples;

        samples = new Sample[10]; //samples'ın türü Sample türünden bir dizi samples[i]'nin türü Sample

        System.out.println("Dizi elemanları yaazdırılıyor: ");

        for (int i = 0; i < 10; ++i)
            samples[i] = new Sample(i); //ctor'u kullandık

        for (int i = 0; i < 10; ++i)
            System.out.printf("%d ", samples[i].x);

        System.out.println();
    }
}

class Sample {
    public int x;
    public Sample(int a) {
        x = a;
    }
}




