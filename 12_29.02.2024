/*----------------------------------------------------------------------------------------------------------------------
Math sınıfının logaritma fonksiyonuyla ilişkin metotları şunlardır: log, log10,log1p.
----------------------------------------------------------------------------------------------------------------------
*/

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		double a = kb.nextDouble();
		
		System.out.printf("log(%f) = %f%n",a,Math.log(a));
		System.out.printf("log10(%f) = %f%n",a,Math.log10(a));
		System.out.printf("log1p(%f + 1) = %f%n",a,Math.log1p(a));
	}	
}

/*----------------------------------------------------------------------------------------------------------------------
	 Aşağıdaki demo örneği inceleyiniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String[] args) 
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("İki sayı giriniz:");
		double a = kb.nextDouble();
		double b = kb.nextDouble();
		
		System.out.printf("log(%f, %f) = %f%n", a, b, MathUtil.log(a, b));
	}
}

/*----------------------------------------------------------------------------------------------------------------------
Math sınıfının PI ve E elemanları
----------------------------------------------------------------------------------------------------------------------
*/

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.println(Math.PI);
		System.out.println(Math.E);
		
	}	
}

/*----------------------------------------------------------------------------------------------------------------------
Math sınıfının trigonometrik işlem yapan metotları radyan ölçü birimi ile çalışırlar
----------------------------------------------------------------------------------------------------------------------
*/

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.println("Derece bilgisini giriniz: ");
		double a = kb.nextDouble();
		
		System.out.printf("sin(%f) = %f%n",a,Math.sin(Math.toRadians(a)));
		
	}	
}


/*----------------------------------------------------------------------------------------------------------------------
Math sınıfının abs metotları 
----------------------------------------------------------------------------------------------------------------------
*/

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.println("Bir sayı giriniz: ");
		int a = kb.nextInt();
		
		System.out.printf("|%d| = %d%n",a,Math.abs(a));
		
	}	
}

/*----------------------------------------------------------------------------------------------------------------------
Math sınıfının min ve max metotları 
----------------------------------------------------------------------------------------------------------------------
*/

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.println("İki sayı giriniz: ");
		int a = kb.nextInt();
		int b = kb.nextInt();
		
		System.out.printf("min(%d,%d)= %d%n",a,b,Math.min(a,b));
		System.out.printf("max(%d,%d)= %d%n",a,b,Math.max(a,b));
	}	
}
/*----------------------------------------------------------------------------------------------------------------------
Math sınıfının min ve max metotları ile 3 tane sayının en küçüğünün ve en büyüğünün bulunması.
----------------------------------------------------------------------------------------------------------------------
*/

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.println("Üç sayı giriniz: ");
		int a = kb.nextInt();
		int b = kb.nextInt();
		int c = kb.nextInt();
		
		System.out.printf("min(%d, %d, %d)= %d%n",a,b,c, Math.min(Math.min(a,b),c));
		System.out.printf("max(%d, %d, %d)= %d%n",a,b,c, Math.max(Math.max(a,b),c));
	}	
}

/*----------------------------------------------------------------------------------------------------------------------
Math sınıfının tam sayı değerine yuvarlayan önemli bazı metotları:
----------------------------------------------------------------------------------------------------------------------
*/

package csd;

class App{
	public static void main(String [] args) {
		
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.println("Bir sayı giriniz: ");
		double a = kb.nextDouble();
		
		
		System.out.printf("round(%f) = %d%n",a, Math.round(a));
		System.out.printf("round(%f) = %f%n",a, Math.rint(a));
		System.out.printf("ceil(%f) = %f%n",a, Math.ceil(a));
		System.out.printf("floor(%f) = %f%n",a, Math.floor(a));
	}	
}


Sabitler (Literals): Program içerisinde doğrudan yazılan bir değere sabit (literals/constant) denir. 

Anahtar Notlar: Anımsanacağı gibi iki tırnak içerisindeki yazılara "string literal" denir.

Sabitlerin de türleri vardır. Sabitlerin türleri derleme aşamasında yani derleyici tarafından tespit edilir.

Anahtar Notlar: Derleyicinin bir ifadenin türünü tespit etmesine genel "type inference/deduction" denilmektedir.

Sabit türleri aşağıdaki kurallara göre belirlenir:
- Sayı nakta içermiyorsa, sonunda herhangi bir ek almamışsa ve int türü sınırları içerisinde kalıyorsa int türden bir 
sabittir. Sayı, nokta içermiyorsa fakat int türü sınırları dışındaysa error oluşur. Örnekler: 100, 2000000000 vb.

- Sayı nokta içermiyorsa ve sonuna L (küçük veya büyük harf olarak) son ekini almışsa long türdendir. L son ekini almış 
bir sabit long türü sınırları dışındaysa error oluşur. Örneğin 10L, 4000000000L vb.

Anahtar Notlar: Küçük harf L son eki 1 (bir) sayısına özellikle bazı yazı türlerinde benzediği okunabilirlik açısından
kullanılması tavsiye edilmez.

- Java'da byte ve short türden sabit yoktur. 

- Sayı nokta içeriyorsa ve sonuna herhangi bir ek almamışsa double türdendir. Örneğin: 3.4, 6.6 vb.

- Sayı nokta içersin ya da içermesin sonunda D (küçük veya büyük) ekini alıyorsa double türdendir. Örneğin: 4.5D, 5D, 5.6d vb.

- Sayı nokta içersin ya da içermesin sonunda F (küçük veya büyük) ekini alıyorsa float türdendir. Örneğin: 3.4F, 7F, 5.6f vb.

Anahtar Notlar: Nokta içeren ve noktadan sonraki kısmın tamamı sıfır olmayan bir sabitin (yani double türden sabitin)
sonuna F (küçük veya büyük) eki getirildiğinde, sayının değeri float türü ile temsil edilemiyorsa en yakın değere
yuvarlanır (rounding error). 

- Boolean türden iki tane sabit vardır: true, false.

- Tek tırnak içerisinde yazılan karaterlere ilişkin sembollere tırnaklarıyla beraber karakter sabitleri (character literals).
Karakter sabitleri char türdendir. Tek tırnak içerisinde özel bazı durumlar dışında tek bir karakter yazılır. Aksi durumda 
error oluşur. Bir karakter sabiti ilgili karakterin karakter tablosundaki sıra numarasına karşılık gelir. Aslında biz
char türden sabit yazarak o sabite ilişkin karakterin sıra numarasını elde etmiş oluruz. Bu sıra numarasını char
türden bir değişken içerisinde saklayarak mantıksal olarak o karakteri tutmuş oluruz. Bazı karakterler klavyedeki
tuş kombinasyonları ile doğrudan yazılamazlar. Bazı karakterler ise doğrudan ekrana basılamazlar (non-printable). 
Bu tarz karakterler doğrudan tek tırnak içerisinde karakter sabiti olarak yazılamazlar. Bu karakterler ters bölü 
karateri ile birlikte özel bir karakter kullanılarak tek tırnak içerisinde yani karakter sabiti olarak yazılırlar. 
Ters bölü ile yazılan karakterlere "escape sequence" karakterler denir. Java'da desteklenen escape sequence
karakterler şunlardır:
'\n'	-> Line Feed (LF)
'\r'	-> Carriage Return (CR)
'\t'	-> Tabular (TAB)
'\f'	-> Form feed
'\''    -> Single Quote


/*----------------------------------------------------------------------------------------------------------------------
	Line Feed karakter sabiti
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String[] args) 
	{
		char c;
		
		c = '\n';
		
		System.out.print("Hello, World");
		System.out.print(c);
		System.out.println("Goodbye, World");
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Carriage Return karakter sabiti. 
	Dikkat: Aşağıdaki örneği işletim sisteminizin "komut yorumlayıcı" programı ile çalıştırınız. Kullandığınız IDE'nin
	console penceresi farklı yorumlayabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String[] args) 
	{
		char c;
		
		c = '\r';
		
		System.out.print("Hello, World");
		System.out.print(c);
		System.out.println("Hi");
	}
}


























