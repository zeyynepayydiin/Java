/*----------------------------------------------------------------------------------------------------------------------
   Sınıf Çalışması: Parametresi ile aldığı int türden iki matrisin çarpımından oluşan matrisi döndüren multiply isimli
   metodu MatrixUtil içerisinde yazınız ve aşağıdaki kod ile test ediniz.
   Açıklamalar:
   - Metot matris olup olmama kontrolü yapmayacaktır.
   - Metot matrislerin çarpılıp çarpılmayacağını kontrol etmeyecektir.
   - İki matrisin çarpılabilmesi için birinci matrisin sütun sayısının ikinci matrisin satır sayısına eşit olması gerekir.
   Yani m x n ve n x k matrisleri çarpılabilir. Sonuçta elde edilen matrisin m x k boyutlarındadır.
   - Matris çarpımına ilişkin formülü şu link'ten elde edebilirsiniz:
   https://en.wikipedia.org/wiki/Matrix_multiplication
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util.math.matrix.test;
import org.csystem.util.math.matrix.MatrixUtil;
import java.util.Random;
import java.util.Scanner;
import static org.csystem.util.array.ArrayUtil.print;
import static org.csystem.util.math.matrix.MatrixUtil.generateRandomMatrix;
import static org.csystem.util.math.matrix.MatrixUtil.multiply;

public class MatrixUtilMultiplyTest {
    public static void run()
    {
        Random r = new Random();
        Scanner kb = new Scanner(System.in);

        while (true) {
            System.out.print("Satır sayısını giriniz:");
            int m = Integer.parseInt(kb.nextLine());

            System.out.print("Sütun sayısını giriniz:");
            int n = Integer.parseInt(kb.nextLine());

            System.out.print("İkinci matrisin sütun sayısını giriniz:");
            int k = Integer.parseInt(kb.nextLine());

            if (m <= 0 || n <= 0 || k <= 0)
                break;

            int [][] a = generateRandomMatrix(r, m, n, 0, 10);
            int [][] b = generateRandomMatrix(r, n, k, 0, 10);

            print(a, 2);
            System.out.println("----------------------------------------");
            print(b, 2);
            System.out.println("----------------------------------------");
            print(multiply(a,b),3);
        }
    }
    public static void main(String[] args) {

        run();
    }
}
/*----------------------------------------------------------------------------------------------------------------------
   Sınıf Çalışması: Bir okulda ortak olarak Fizik sınavı yapılıyor olsun. Sınav n tane şube için yapılsın. n sayısını
   klavyeden isteyiniz. Her bir şubedeki öğrenci sayısı da klavyeden isteyiniz. Bu sınavdan alınan notları rassal olarak
   belirleyiniz. Bu işlemlerden sonra ilgili notlara göre her bir şubenin ayrı ayrı Fizik dersi ortalaması ve okulun Fizik
   dersi ortalamasını hesaplayan simülasyonu yazınız.
   Açıklamalar:
   - Bir öğrencinin notu [0, 10] aralığında bir tamsayı olabilir.
   - Programı mümkün olduğunca nesne yönelimli olarak ve genel olarak tasarlayınız.
   - Her bir şubenin not dağılımına ilişkin histogram'ları ve okulun Fizik notlarına ilişkin histogramı düşey olarak (düşey
   olarak) çiziniz.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Elemanlarının Temel Erişim Belirleyicileri:
    Anımsanacağı gibi sınıf elemanlarının (member) (methodlar ve veri elemanları) bu erişim belirleyicilerinden
    birini alabilirler: public, no-modifier, protected, private.
    Burada no-modifier erişim belirleyici yazmamak anlamındadır. Java'da hiçbir no-modifier'ın da diğerlerinden farklı
    bir anlamı vardır. Burada öncelikle bu erişim belirleyicilerin syntax ve semantic olarak kuralları ele alınacak.
    Sonrasında NYPT'de kullanımı anlatılacaktır.

    Aslında bir sınıf erişim belirleyiciler açısından 4 bölümden oluşur. Bir eleman hangi erişim belirleyici ile
    bildirilirse o bölüme eklenmiş olur.

    public ve private bölümlerin anlamı aynı paketteki diğer sınıflar (friendly classes) veya farklı paketlerdeki diğer
    sınıflar için değişmez. Yani private bölüme erişim aynı paketeki veya farklı paketlerdeki diğer sınıflar için aynı
    anlamdadır. Bener şekilde public bölümün anlamı aynı paketteki diğer sınıflar için veya farklı paketlerdeki diğer
    sınıflar için de aynıdır. Ancak non-modifier ve protected bölümlere aynı paketteki diğer sınıfların erişimi ile
    farklı paketlerdeki diğer sınıfların erişimi değişiklik göstermektedir.

    Erişim belirleyiciler, sınıf dışından erişimlerde ageçerlidir. Sınıf içerisinde her bölüme erişilebilir.

    Syntax açısından bölümlere ait elemanlar karışık olarak bildirilebilir. Şüphesiz belli bir düzende bildirimi
    okunabilirliği artırır.

    *Constructor ile erişim de sınıf içi erişim*
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
    Sınıfın public bölümüne aynı paketteki tüm sınıfdan erişilebilir.
----------------------------------------------------------------------------------------------------------------------*/    
package x;

public class A {
    public int a;

    public A(/*...*/)
    {
        //...
    }
    public void foo()
    {
        //...
    }
}
package x;

public class B {
    public void bar()
    {
        A o  = new A(/*...*/);
        
        o.a = 20;
        o.foo();
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Sınıfın public bölümüne farklı paketlerdeki tüm sınıfdan erişilebilir.
----------------------------------------------------------------------------------------------------------------------*/
package x;

public class A {
    public int a;

    public A(/*...*/)
    {
        //...
    }
    public void foo()
    {
        //...
    }
}
package y;

import x.A;

public class B {
    public void bar()
    {
        A o  = new A(/*...*/);

        o.a = 20;
        o.foo();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıfın private bölümüne aynı paketteki diğer sınıflardan erişilemez.
----------------------------------------------------------------------------------------------------------------------*/
package x;

public class A {
    private int a;

    private A(/*...*/)
    {
        //...
    }
    private void foo()
    {
        //...
    }
}

package x;
public class B {
    public void bar()
    {
        A o  = new A(/*...*/); //error

        o.a = 20; //error
        o.foo(); //error
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıfın private bölümüne farklı paketlerdeki diğer sınıflardan erişilemez.
---------------------------------------------------------------------------------------
package x;

public class A {
    private int a;

    private A(/*...*/)
    {
        //...
    }
    private void foo()
    {
        //...
    }
}

package y;

import x.A;

public class B {
    public void bar()
    {
        A o  = new A(/*...*/);

        o.a = 20;
        o.foo();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıfın no-modifier bölümüne aynı paketteki diğer sınıflar (friendly classes) için public anlamındadır.
----------------------------------------------------------------------------------------------------------------------*/
package x;

public class A {
     int a;

     A(/*...*/)
    {
        //...
    }
     void foo()
    {
        //...
    }
}
package x;

public class B {
    public void bar()
    {
        A o  = new A(/*...*/);

        o.a = 20;
        o.foo();
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Sınıfın no-modifier bölümüne farklı paketteki diğer sınıflar için private anlamındadır.
----------------------------------------------------------------------------------------------------------------------*/
package x;

public class A {
     int a;

     A(/*...*/)
    {
        //...
    }
     void foo()
    {
        //...
    }
}
package y;

import x.A;

public class B {
    public void bar()
    {
        A o  = new A(/*...*/); //error

        o.a = 20; //error
        o.foo(); //error
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Anahtar Notlar: Sınıfın no-modifier bölümündeki elemanlar için "package-private" terimi de kullanılabilmektedir.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
    Sınıfın protected bölümüne aynı paketteki diğer sınıflar için public anlamındadır.
----------------------------------------------------------------------------------------------------------------------*/
package x;

public class A {
     protected int a;

     protected A(/*...*/)
    {
        //...
    }
     protected void foo()
    {
        //...
    }
}
package x;

public class B {
    public void bar()
    {
        A o  = new A(/*...*/);

        o.a = 20;
        o.foo();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıfın protected bölümü farklı paketlerdeki diğer sınıflar için türetme (inheritance) söz konusu değilse private 
    anlamındadır. Türemiş sınıf (derived/ sub class) kendisine ait protected bölüme erişilebilir. protected bölümünün 
    anlamı ve türemiş sınıf kavramı inheritance konusunda ayrıca ele alınacaktır.
----------------------------------------------------------------------------------------------------------------------*/
package x;

public class A {
     protected int a;

     protected A(/*...*/)
    {
        //...
    }
     protected void foo()
    {
        //...
    }
}
package y;

import x.A;

public class B {
    public void bar()
    {
        A o  = new A(/*...*/); //error

        o.a = 20; //error
        o.foo(); //error
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Sınıf içerisinde her elemana erişilebilir.
----------------------------------------------------------------------------------------------------------------------*/
package x;

public class A {
     private int a;

     protected void foo()
    {
        a = 10;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Erişim belirleyicilere ilişkin özet tablo şu şekildedir:

    Erişim Belirleyici	Aynı Sınıf	Friendly Sınıf	Farklı Paketteki Sınıf	Türemiş sınıf
        public	            T              	T	                T	                    T
        protected          	T	              T	                F	                    T
        no-modifier	        T    	          T	                F	                    F
        private	            T              	F	                F	                    F
----------------------------------------------------------------------------------------------------------------------*/

