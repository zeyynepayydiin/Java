/*----------------------------------------------------------------------------------------------------------------------
  Anahtar Notlar: Bir veri elemanının final olması algoritmik açıdan kodu değiştirimiyorsa ve final yapılması sentaks 
  olarak error oluşturmuyorsa, final olarak bildirilmesi her zaman iyi bir tekniktir. Pek çok static kod analizi aracı 
  da default olarak final yapma uyarısı verir. Ancak programcının nasılsa uyarı verir düşüncesiyle değil, iyi bir teknik
  olarak bunu tasarımda düşünmesi ve ona göre kodu yazması gerekir.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Bir okulda ortak olarak Fizik sınavı yapılıyor olsun. Sınav n tane şube için yapılsın. n sayısını
    klavyeden isteyiniz. Her bir şubedeki öğrenci sayısını da klavyeden isteyiniz. Bu sınavdan alınan notları rassal 
    olarak belirleyiniz. Bu işlemlerden sonra ilgili notlara göre her bir şubenin ayrı ayrı Fizik dersi ortalaması ve 
    okulun Fizik dersi ortalamasını hesaplayan simülasyonu yazınız. 
    
    Açıklamalar:
    Ders adını komut satırı argümanı olarak alınız
    Bir öğrencinin not [0, 10] aralığında bir tamsayı olabilir.
    Programı mümkün olduğunca nesne yönelimli olarak ve genel olarak tasarlayınız.
    Her bir şubenin not dağılımına ilişkin histogram'ları ve okulun Fizik notlarına ilişkin histogramı (düşey olarak) 
    çiziniz. Not: İleride daha iyisi yazılacaktır.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
package org.csystem.app.simulation.grades;

import org.csystem.util.console.CommandLineArgsUtil;

public class ExamSimulationApp {
    public static void run(String [] args)
    {
        CommandLineArgsUtil.checkLengthEquals(1, args.length, "wrong number of arguments");
        ExamSimulation examSimulation = new ExamSimulation(args[0]);

        examSimulation.run();
    }

    public static void main(String[] args)
    {
        run(args);
    }
}
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
package org.csystem.app.simulation.grades;

import org.csystem.util.array.ArrayUtil;
import org.csystem.util.string.StringUtil;

import java.util.Random;
import java.util.Scanner;

public class ExamSimulation {
    private final String m_lectureName;
    private Exam m_exam;

    private static void drawHistogram(Classroom classroom, int maxGrade)
    {
        int [] data = classroom.getHistogramData(maxGrade);
        ArrayUtil.print(data);
        ArrayUtil.drawHistogram(data, 20, '-');
    }

    private static void setGrades(Classroom classroom)
    {
        Random random = new Random();
        int n = classroom.getNumberOfStudents();

        for (int i = 0; i < n; ++i) {
            String firstName = StringUtil.generateRandomTextEN(random, random.nextInt(5, 11));
            String lastName = StringUtil.generateRandomTextEN(random, random.nextInt(5, 11));

            classroom.setGrade(i, new GradeInfo("%s %s".formatted(firstName, lastName), random.nextInt(11)));
        }
    }

    private static Exam createExam(String lectureName, int nClasses, Scanner kb)
    {
        Exam exam = new Exam(lectureName, nClasses);

        for (int i = 0; i < nClasses; ++i) {
            System.out.printf("Input number of students of classroom %d:", i + 1);
            Classroom classroom = new Classroom(Integer.parseInt(kb.nextLine()));

            setGrades(classroom);
            exam.setClassroom(i, classroom);
        }

        return exam;
    }

    private void printReport()
    {
        int nClasses = m_exam.getNumberOfClassrooms();
        System.out.printf("Grades of lecture %s:%n", m_exam.getLectureName());

        for (int i = 0; i < nClasses; ++i) {
            int nStudents = m_exam.getNumberOfStudents(i);
            System.out.printf("Classroom %d -> ", i + 1);
            for (int k = 0; k < nStudents; ++k)
                System.out.printf("%s ", m_exam.getGradeInfo(i, k).toString());

            System.out.printf("Average:%f%n", m_exam.getAverage(i));
        }

        System.out.printf("School Average:%f%n", m_exam.getAverage());
    }

    private void drawHistogram()
    {
        int nClasses = m_exam.getNumberOfClassrooms();

        for (int i = 0; i < nClasses; ++i) {
            System.out.printf("Data of classroom %d%n", i + 1);
            drawHistogram(m_exam.getClassroom(i), m_exam.getMaxGrade());
        }

        System.out.printf("Histogram of %s lecture:%n", m_exam.getLectureName());
        int [] data = m_exam.getHistogramData();

        ArrayUtil.print(data);
        ArrayUtil.drawHistogram(data, 20, '-');
    }

    public ExamSimulation(String lectureName)
    {
        m_lectureName = lectureName;
    }

    public void run()
    {
        Scanner kb = new Scanner(System.in);

        System.out.print("Input number of classrooms:");
        int n = Integer.parseInt(kb.nextLine());

        m_exam = createExam(m_lectureName, n, kb);
        m_exam.calculate();
        printReport();
        System.out.println("Histogram:");
        drawHistogram();
    }
}
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
package org.csystem.app.simulation.grades;

public class Exam {
    private String m_lectureName;
    private final Classroom [] m_classrooms;
    private final double [] m_averages;
    private double m_average;
    private final int m_maxGrade;

    public Exam(String lectureName, int nClasses)
    {
        m_lectureName = lectureName;
        m_classrooms = new Classroom[nClasses];
        m_averages = new double[nClasses];
        m_maxGrade = 10;
    }
    public Exam(String lectureName, int nClasses, int maxGrade)
    {
        m_lectureName = lectureName;
        m_classrooms = new Classroom[nClasses];
        m_averages = new double[nClasses];
        m_maxGrade = maxGrade;
    }

    public String getLectureName() {
        return m_lectureName;
    }

    public void setLectureName(String lectureName) {
        m_lectureName = lectureName;
    }
    public Classroom getClassroom(int i)
    {
        return m_classrooms[i];
    }

    public double getGrade(int i, int k)
    {
        return getGradeInfo(i, k).getGrade();
    }
    public GradeInfo getGradeInfo(int i, int k) {
        return m_classrooms[i].getGradeInfo(k);
    }
    public int getNumberOfClassrooms()
    {
        return m_classrooms.length;
    }
    public int getNumberOfStudents(int i)
    {
        return m_classrooms[i].getNumberOfStudents();
    }
    public void setClassroom(int i, Classroom classroom)
    {
        m_classrooms[i] = classroom;
    }
    public void setGrade(int i, int k, GradeInfo gradeInfo)
    {
        m_classrooms[i].setGrade(k, gradeInfo);
    }
    public double getAverage(int i) {
        return m_averages[i];
    }

    public double getAverage() {
        return m_average;
    }

    public int getMaxGrade()
    {
        return m_maxGrade;
    }

    public int [] getHistogramData()
    {
        int [] data = new int[m_maxGrade + 1];

        for (Classroom classroom : m_classrooms) {
            int nStudents = classroom.getNumberOfStudents();

            for (int i = 0; i < nStudents; ++i)
                ++data[classroom.getGradeInfo(i).getGrade()];
        }

        return data;
    }

    public void calculate()
    {
        int totalNumberOfStudents = 0;
        int totalGrades = 0;

        for (int i = 0; i < m_classrooms.length; ++i) {
            int totalClassNumberOfStudents = m_classrooms[i].getNumberOfStudents();
            int totalClassRoomGrades = 0;
            for (int k = 0; k < totalClassNumberOfStudents; ++k) {
               GradeInfo gradeInfo = m_classrooms[i].getGradeInfo(i);

                totalClassRoomGrades += gradeInfo.getGrade();
            }
            m_averages[i] = (double) totalClassRoomGrades / totalClassNumberOfStudents;
            totalGrades += totalClassRoomGrades;
            totalNumberOfStudents += totalClassNumberOfStudents;
        }
        m_average = (double) totalGrades / totalNumberOfStudents;
    }
}

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
package org.csystem.app.simulation.grades;

public class GradeInfo {
    private String m_studentName;
    private int m_grade;


    public GradeInfo(String studentName, int grade)
    {
        m_studentName = studentName;
        m_grade = grade;
    }
    public String getStudentName()
    {
        return m_studentName;
    }
    public void setStudentName(String studentName)
    {
        // kontrol işlemi
        m_studentName = studentName;
    }
    public int getGrade()
    {
        return m_grade;
    }
    public void setGrade(int grade)
    {
        // kontrol işlemi
        m_grade = grade;
    }

    public String toString()
    {
        return "%s, %d".formatted(m_studentName, m_grade);
    }
}

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
package org.csystem.app.simulation.grades;

public class Classroom {
    private final GradeInfo [] m_grades;

    public Classroom(int nStudents)
    {
        m_grades = new GradeInfo[nStudents];
    }
    public void setGrade(int i, GradeInfo gradeInfo)
    {
        m_grades[i] = gradeInfo;
    }

    public GradeInfo getGradeInfo(int i)
    {
        return m_grades[i];
    }
    public int getNumberOfStudents()
    {
        return m_grades.length;
    }

    public int [] getHistogramData(int maxGrade)
    {
       int [] data = new int[maxGrade + 1];

       for (GradeInfo gradeInfo : m_grades)
          ++data[gradeInfo.getGrade()];
        return data;
    }


    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        String delimiter = ", ";
        for (GradeInfo gi : m_grades)
            sb.append(gi.toString()).append(delimiter);

        return sb.substring(0, sb.length() - delimiter.length()) +"]";
    }
}

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki NumericLottery ve final veri elemanını inceleyiniz.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
package org.csystem.app.lottery.numeric;

import java.util.Random;

public class NumericLottery {
    private final Random m_random;

    private boolean [] getFlags()
    {
        boolean [] flags = new boolean[50];

        for (int i = 0; i < 6; ++i) {
            int val;

            do
                val = m_random.nextInt(1, 50);
            while (flags[val]);

            flags[val] = true;
        }

        return flags;
    }

    private int [] getNumbers(boolean [] flags)
    {
        int [] a = new int[6];
        int idx = 0;

        for (int i = 1; i < flags.length; ++i)
            if (flags[i])
                a[idx++] = i;

        return a;
    }

    public NumericLottery(Random r)
    {
        m_random = r;
    }

    public int [] getNumbers()
    {
        return getNumbers(getFlags());
    }
}
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
    (Aşağıdaki örnekte veri elemanları final olmasaydı derleyici bunlara sabit ifadesi gözüyle bakmazdı ve bellekte yer 
ayırırdı bu açıdan final ile yazmak daha efficient)
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
