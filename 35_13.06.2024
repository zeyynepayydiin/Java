/*----------------------------------------------------------------------------------------------------------------------
Sınıfın non-static veri elemanı nesneye özel olduğundan sınıf ile temsil edilen kavrama ilişkin bir karakteristiği ya da
(characteristics) başka bir deyişle bir özniteliği (attribute) belirtir. Bu durumda bir sınıf non-static veri elemanları 
ile bir bileşik türdür (compund type). Örneğin analitik düzlemde bir noktanın iki tane bileşeni vardır: axis, ordinate.
Bu durumda analitik düzlemde bir "nokta" kavramı, ne tek başına axis ne de tek başına ordinate'dir. İkisi birlikte
bir noktadır. Bu durumda programcı bu noktayı temsil eden bir sınıf bildiriminde non-static veri elemanı olarak 
(en azından) axis ve ordinate bilgilerini tutar. Dikkat edilirse sınıfın isminin belirlenmesinden, içerisindeki
elemanların belirlenmesine kadarki kısım sınıfın ait olduğu "domain"e göre ele alınır.

----------------------------------------------------------------------------------------------------------------------
*/
package csd;

class App{
	public static void main(String [] args) {
	
		java.util.Scanner kb = new java.util.Scanner(System.in);

		
	}	
}

class Point {
	public double x;
	public double y;
}

/*----------------------------------------------------------------------------------------------------------------------
Peki bir referansın uzunluğu ne kadardır? Bir referansın uzunluğu sistemin adresleyebileceği kadardır. Yani örneğin 32
bir sistemde 4 byte, 64 bit bir sistemde 8 byte'dır. Bu anlamda adresler tamsayı formatında olduğundan tutuluş biçimleri
yine işaretsiz ikiye tümleme formatıdır. Referansların uzunluğu türe göre değişmez. Bu anlamda bir uygulama için ilgili 
sistemde tüm referansların uzunluğu aynıdır.

Peki bir nesnenin uzunluğu ne kadardır? Bir nesnenin uzunluğu en az, ilişkin olduğu sınıfın non-static veri elemanlarının
uzunluğu kadardır. Burada en az kavramıyla sisteme ilişkin başka bilgilerin de eklenebileceği anlatılmaktadır. Detaylar
önemsizdir. Java programcısı açısından uzunluk non-static veri elemanlarının uzunluğu ile belirlenir olarak algılanmalıdır.
----------------------------------------------------------------------------------------------------------------------
*/
/*----------------------------------------------------------------------------------------------------------------------
Peki non-static bir veri elemanının ömrü (storage duration) ne kadardır? Non-static bir veri elemanı nesne yaratıldığında
yaratılır. Nesne yok edildiğinde yok edilir. Java'da nesne "garbage collector" tarafından yok edilir. Bu konunun detayları
ileride ele alınacaktır. Bir nesnenin yok edilmesine ilişkin detaylar ileride ele alınacaktır.

Peki non-static bir veri elemanının faaliyet alanı nedir? Bu konu ileride ele alınacaktır.
----------------------------------------------------------------------------------------------------------------------
*/
/*----------------------------------------------------------------------------------------------------------------------
Sınıfın static bir veri elemanı nesne içerisinde yaratılmaz. Sınıfın static br veri elemanına sınıf dışından sınıf
ismi ve nokta operatörü ile erişilir. Sınıfın static veri elemanları sııfın bir elemanı (member) ilk kez kullanıldığında
yaratılır ve program sonuna kadar yaşarlar. Bu durumda sınıfın static bir veri elemanı stack'de yaratılamaz. Static
veri elemanlarının yaratıldığı alana ilişkin detaylar söz konusu olsa da genelde dolaylı olarak heap'te olduğu 
söylenebilir.

Bu durumda static bir veri elemanına erişmek için bir nesne yaratılması gerekmez. Static veri elemanlarına da 
yaratıldıklarında default değerler atanır
----------------------------------------------------------------------------------------------------------------------
*/
package csd;

class App{
	public static void main(String [] args) {
	
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.printf("Sample.x = %d, Sample.y = %b%n", Sample.x, Sample.y);
		
		Sample.x = 10;
		Sample.y = true;
		
		System.out.printf("Sample.x = %d, Sample.y = %b%n", Sample.x, Sample.y);

		++Sample.x;
		
		System.out.printf("Sample.x = %d, Sample.y = %b%n", Sample.x, Sample.y);

	}	
}

class Sample {
	public static boolean y;
	public static int x;
}
/*----------------------------------------------------------------------------------------------------------------------
Aşağıdaki örnekte sayaçlar sınıfları kullanan programcı tarafından tutulmuş ve gerektiğinde artırılmıştır. Bu durumda 
sayacı tutn programcı artırma işlemini unutabilir. Ayrıca başka türler için de sayaçlar tutulması gerektiğinde sayaç
değişken bildirimi hem isim hem de kod yükü açısından bir maliyet getirecektir. Buradaki maliyet geliştirme zamanı
maaliyetidir. Üstelik örnek bir demodur ve daha pek çok da algoritmik detay durumlar söz konusudur.
----------------------------------------------------------------------------------------------------------------------
*/
package csd;
class App{
	public static void main(String [] args) {
	
		java.util.Scanner kb = new java.util.Scanner(System.in);
		DemoGameApp.run();
		
	}	
}
class DemoGameApp{
	public static void run(){
		
		int alienCount = 0;
		int soldierCount = 0;
		
		for (int i = 0; i < 10; ++i) {
			Alien a = new Alien();
			++alienCount;
		}
		for (int i = 0; i < 20; ++i) {
			Soldier a = new Soldier();
			++soldierCount;
		}
		System.out.printf("Number of aliens: %d%n", alienCount);
		System.out.printf("Number of soldiers: %d%n", soldierCount);
	}
	
}
class Alien {
	public int color; // mesela yeşil alien olur kırmızı olur, her alien'ın rengi nesneye özgü o yüzden non-static
	public int armsCount; // aynı şekilde
}

class Soldier{
	public int title;
	public int gunCount;
}
class Civilian{
	
}
class Building{
	
}
class Animal{
	
}
