/*----------------------------------------------------------------------------------------------------------------------
  Sınıflararası İlişkiler

Bir projenin kodlama aşamasında, NYPT kullanılacaksa ilk olarak o domain'e ilişkin varlıklara karşılık gelen sınıflar 
belirlenir. Sonra ilişkiler belirlenir. Buna transformation da denir. Sonrasında kodlama aşamasına geçilir. Örneğin bir 
alışveriş sistemine ilişkin bir uygulamada müşteri, ürün, sipariş gibi kavramlar sınıflar olarak belirlenir. Aslında 
ilişkiler nesneler arasında düşünülür ve sınıflar olarak implemente edilir.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
Bir uygulamanın isterlerinin belirlenmesinden (requirement analysis) teslimine (deployment) kadar geçen süreci şemalarla
ifade etmeye yarayan UML (Unified Modeling Language) denilen bir dil proje geliştirmede kullanılabilmektedir. UML'in, 
genel olarak programcıyı ilgilendiren önemli şemalarında biri class diagram olarak adlandırılan şemadır. Bu şema ile 
sınıflar (aslında UDT'ler) ve aralarındaki ilişkiler bir standart olarak çizilebilmektedir/gösterilebilmektedir.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
Anahtar Notlar: UML oldukça geniştir. Teorik olarak bakıldığında UML ile bir projenin tüm aşamaları belirlenebilir. Ancak 
pratikte her projede tüm detayıyla kullanılmaz. Hatta bazen kodlama aşamasından sonra da şemalarda değişiklikler 
yapılabilir. Bu, UML'in hedefine aykırı değildir. UML projenin süreçlerini anlatır. Değişiklik yapıldığında şemaların 
değişmesi de gayet normal bir durumdur.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
Bir kodun yazılabilmesi için (derlenebilmesi de denebilir) gereken kodların olması durumuna bağımlılık (dependency) denir. 
Örneğin bir metodu yazabilmek için başka bir metodun olması gerektiği durumdur. NYPT açısından dependency, sınıflar 
(aslında tüm UDT'ler) için de söz konusudur. Örneğin bir sınıfın, başka bir sınıf türünden veri elamanı olması durumu 
aslında bir dependency'dir.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
Anahtar Notlar: Modelleme yapılırken kavramın ya da kavramların özel durumları değil genel durumları düşünülür. Özel 
durumlar da düşünülürse hiç bir şey modellenemez. Örneğin araba nesnesi ile ona ait olan motor nesnesi arasındaki ilişki
(adının şu an için önemi yok) genel olarak aşağıdaki iki koşulu birden sağlar:

- Bir araba nesnesine ait motor nesnesi başka bir nesne tarafından kullanılamaz.
- Bir araba nesnesine ait motor nesnesi ömrüne hemen hemen araba ile başlar ve ömrü hemen hemen araba ile son bulur. 
Buradaki örnekte özel bir durum olan arabanın motorunun değişmesi bu modeli etkilemez. Çünkü genel olarak karşılaşılan 
bir durum değildir.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
İki sınıf arasında aşağıdaki ilişkilerden ya birisi vardır ya da hiç birisi yoktur:
- Composition
- Aggregation
- Assocition
- Inheritance
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
Anahtar Notlar: Yukarıdaki 4 ilişkiden inheritance dışında kalanlar için Java'da ayrı bir kural seti yoktur. İlgili 
ilişkinin tanımı ve kuralları doğrultusunda, Java kuralları ile implemente edilebilir. Ancak inheritance ilişkisi için 
Java'da ayrı bir kural seti vardır.

Anahtar Notlar: İki sınıf arasında, sınıfların tasarımları ve implementasyonları gereği yukarıdaki 4 ilişkiden hiç birisi 
olmamasına karşın bir dependency söz konusu olabilir. Bu da özel durumlardandır, genel durumu etkilemez. Bu durumlara 
ilişkin örnekler ileride verilecektir.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
Composition (has a): A has a B ilişkisinde aşağıdaki iki koşulun gerçeklenmesi gerek ve yeterdir:
- A nesnesine ait B nesnesi başka bir nesne tarafından kullanılamayacak. (B private yapılacak yani)
- A nesnesine ait B nesnesi ömrüne hemen hemen A nesnesi başlayacak ve ömrü hemen hemen A nesnesi ile son bulacak. (Bir
nesnenin ömrüne başladığı nokta constructor'dır.) Burada, B nesnesi ait olduğu A nesnesi tarafından gerektiğinde(yani 
istenildiği zaman) kullanılabilecektir. Bu tarz kullanıma bütünsel kullanım (whole usage) denir. (Burada A B'ye bağımlı 
B olmadan A olmaz, motor olmadan araba olmaz)
ve  
A has a B ilişkisinin sınıf diagramı şu şekildedir:
https://github.com/oguzkaran/Java-Jan-2024/blob/main/doc/media/Composition.PNG?raw=true
----------------------------------------------------------------------------------------------------------------------*/
A ile B arasındaki composition ilişkinin genel bir implementasyonu
/*----------------------------------------------------------------------------------------------------------------------
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A x = new A(/*...*/);

        x.doWork1();
        x.doWork2();
    }
}

class A {
    private B m_b; // B nesnesi A nesnesine ait ve başka bir nesne tarafından kullanılamaz

    public A(/*...*/)
    {
        m_b = new B(/*...*/); // B nesnesinin ömrü A nesnesi ile başlayıp A nesnesi ile bitiyo
    }                         // çünkü nesne constructor yazıldığında oluşturuldu.

    public void doWork1()
    {
        //...
        m_b.doSomething();
    }

    public void doWork2()
    {
        //...
        m_b.doSomething();
    }
}

class B {
    //...
    public void doSomething()
    {
        //...
    }
}
----------------------------------------------------------------------------------------------------------------------*/
(Eğer ben bir constructor yazmazsam default constructor parametresiz olarak oluşur. Ama yazarsam default constructor
oluşmaz.)
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
