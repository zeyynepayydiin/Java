/*----------------------------------------------------------------------------------------------------------------------
   Sınıf Çalışması: Parametresi ile aldığı int türden iki matrisinin toplamından oluşan matrise geri dönen add isimli
   metodu MatrixUtil sınıfı içerisinde yazınız ve test ediniz.
   Açıklamalar:
   - Metot matrislerin toplanıp toplanmayacağını kontrol etmeyecektir
   - İki matrisin toplamı karşılıklı elemanların toplamından elde edilen yeni bir matristir.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util.math.matrix.test;
import org.csystem.util.math.matrix.MatrixUtil;
import java.util.Random;
import java.util.Scanner;
import static org.csystem.util.array.ArrayUtil.print;
import static org.csystem.util.math.matrix.MatrixUtil.add;

public class MatrixUtilAddTest {
    public static void run()
    {
        Random random = new Random();
        Scanner kb = new Scanner(System.in);

        while (true) {
            System.out.print("Satır sayısını giriniz: ");
            int m = Integer.parseInt(kb.nextLine());
            System.out.print("Sütun sayısını giriniz: ");
            int n = Integer.parseInt(kb.nextLine());

            if (m <= 0 || n <= 0)
                break;

            int [][] a = MatrixUtil.generateRandomMatrix(random, m, n,0, 10);
            int [][] b = MatrixUtil.generateRandomMatrix(random, m, n,0, 10);


            print(a, 2);
            System.out.printf("----------------------------------------");
            print(b, 2);
            System.out.printf("----------------------------------------");

            int [][] c = add(a,b);

            print(c,3);
        }
    }
    public static void main(String[] args) {

        run();
    }
}
/*----------------------------------------------------------------------------------------------------------------------
   Sınıf Çalışması: Parametresi ile aldığı int türden iki matrisinin farkından oluşan matrise geri dönen subtract isimli
   metodu MatrixUtil sınıfı içerisinde yazınız ve test ediniz.
   Açıklamalar:
   - Metot matrislerin çıkartılıp çıkartılmayacağını kontrol etmeyecektir.
   - İki matrisin farkı karşılıklı elemanların farkından elde edilen yeni bir matristir.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util.math.matrix.test;

import org.csystem.util.math.matrix.MatrixUtil;

import java.util.Random;
import java.util.Scanner;

import static org.csystem.util.array.ArrayUtil.print;
import static org.csystem.util.math.matrix.MatrixUtil.add;

public class MatrixUtilSubtractTest {
    public static void run()
    {
        Random random = new Random();
        Scanner kb = new Scanner(System.in);

        while (true) {
            System.out.print("Satır sayısını giriniz: ");
            int m = Integer.parseInt(kb.nextLine());
            System.out.print("Sütun sayısını giriniz: ");
            int n = Integer.parseInt(kb.nextLine());

            if (m <= 0 || n <= 0)
                break;

            int [][] a = MatrixUtil.generateRandomMatrix(random, m, n,0, 10);
            int [][] b = MatrixUtil.generateRandomMatrix(random, m, n,0, 10);


            print(a, 2);
            System.out.println("----------------------------------------");
            print(b, 2);
            System.out.println("----------------------------------------");

            int [][] c = add(a,b);

            print(c,2);
        }
    }
    public static void main(String[] args) {

        run();
    }
}
/*----------------------------------------------------------------------------------------------------------------------
   Sınıf Çalışması: Parametresi ile aldığı int türden bir matris ile, ikinci parametresi ile aldığı int türden bir sayıyı 
   çarpan multiplyBy metodunu yazınız ve test ediniz. 
   Açıklamalar: Bir matrisin bir sayı (scalar) ile çarpımı matrisin tüm elemanlarını o sayı ile çarpmaktır.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util.math.matrix.test;
import org.csystem.util.math.matrix.MatrixUtil;
import java.util.Random;
import java.util.Scanner;

import static org.csystem.util.array.ArrayUtil.print;
import static org.csystem.util.math.matrix.MatrixUtil.add;
import static org.csystem.util.math.matrix.MatrixUtil.multiplyBy;

public class MatrixUtilMultiplyByTest {
    public static void run()
    {
        Random random = new Random();
        Scanner kb = new Scanner(System.in);

        while (true) {
            System.out.print("Satır sayısını giriniz: ");
            int m = Integer.parseInt(kb.nextLine());
            System.out.print("Sütun sayısını giriniz: ");
            int n = Integer.parseInt(kb.nextLine());

            if (m <= 0 || n <= 0)
                break;

            System.out.print("Bir sayı giriniz: ");
            int value = Integer.parseInt(kb.nextLine());

            int [][] a = MatrixUtil.generateRandomMatrix(random, m, n,0, 10);

            print(a, 2);
            System.out.println("----------------------------------------");
            multiplyBy(a,value);
            print(a,3);
        }
    }
    public static void main(String[] args) {

        run();
    }
}

!! int double'a atanıyo ama int[][], double[][]'a atanmaz bunlar farklı türden referansa ait elemanlar bunlar bambaşk şeyler.!!
/*----------------------------------------------------------------------------------------------------------------------
   Sınıf Çalışması: Parametresi ile aldığı bir matrisin devriğine (transpose) geri dönen isimli metodu MatrixUtil
   sınıfı içerisinde yazınız ve test ediniz.
   Açıklamalar:
   - Metot matris olup olmama kontrolü yapmayacaktır.
   - Bir matrisin devriği satırların sütun, sütunların satır yapılmış halidir.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util.math.matrix.test;
import org.csystem.util.math.matrix.MatrixUtil;
import java.util.Random;
import java.util.Scanner;
import static org.csystem.util.array.ArrayUtil.print;
import static org.csystem.util.math.matrix.MatrixUtil.transpose;

public class MatrixUtilTransposeTest {
    public static void run()
    {
        Random random = new Random();
        Scanner kb = new Scanner(System.in);

        while (true) {
            System.out.print("Satır sayısını giriniz: ");
            int m = Integer.parseInt(kb.nextLine());
            System.out.print("Sütun sayısını giriniz: ");
            int n = Integer.parseInt(kb.nextLine());

            if (m <= 0 || n <= 0)
                break;

            int [][] a = MatrixUtil.generateRandomMatrix(random, m, n,0, 10);

            print(a, 2);
            System.out.println("----------------------------------------");
            print(transpose(a),2);

        }
    }
    public static void main(String[] args) {

        run();
    }
}
/*----------------------------------------------------------------------------------------------------------------------
   Dizi dizilerine ilişkin karmaşık bildirimler de söz konusu olabilmektedir. Örneğin:
   int [][][] a referansı her bir elemanı bir dizi dizisi olan bir dizi referansını temsil eder. Bu durumda eğer dizi
   dizilerinin kendi aralarında uzunlukları ve dizi dizilerine ilişkin dizilerin de kendi aralarında uzunlukları eşitse
   yani örneğin bu referansa 'new int[3][4][5] gibi bir dizinin referansı verilirse bu bir dikdörtgen prizmayı temsil
   edebilir. Şüphesiz daha karmaşık bildirimler de söz konusu olabilir ancak pratikte çok kullanılmaz.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;
import java.util.Random;
class App {
    public static void main(String[] args)
    {
        Random r = new Random();
        System.out.println("Matrisin satır ve sütun sayılarını giriniz: ");

        int[][][] a = new int[3][4][5];

       for (int i = 0; i < a.length; ++i)
           for (int j = 0; j < a[i].length; ++j)
               for (int k = 0; k < a[i][j].length; ++k)
                   a[i][j][k] = r.nextInt(100);
 
       for (int [][] arrayOfArray : a)
           for (int [] array : arrayOfArray)
               for (int val : array)
                   System.out.print(val);
        }
    }


